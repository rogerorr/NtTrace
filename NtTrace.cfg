// NTDLL Native Interface entry points

// @author Roger Orr <rogero@howzatt.co.uk>

// Copyright &copy; 2002,2019.
// This software is distributed in the hope that it will be useful, but
// without WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

// Permission is granted to anyone to make or distribute verbatim
// copies of this software provided that the copyright notice and
// this permission notice are preserved, and that the distributor
// grants the recipient permission for further distribution as permitted
// by this notice.

// Comments and suggestions are always welcome.
// Please report bugs to rogero@howzatt.co.uk.

// $Id: NtTrace.cfg 2563 2025-02-22 18:38:02Z roger $

// Alternate name for LPC_MESSAGE
using PPORT_MESSAGE = PLPC_MESSAGE;

using PACCESS_MASK = PULONG;
using PCWNF_STATE_NAME = PULONG;
using PDEVICE_POWER_STATE = PULONG;
using PNTSTATUS = PULONG;
using PPROCESSOR_NUMBER = PULONG;
using PWNF_STATE_NAME = PULONG;

using PRTL_ATOM = PUSHORT;

using PALPC_CONTEXT_ATTR = PVOID;
using PALPC_INFO = PVOID;
using PALPC_MESSAGE_ATTRIBUTES = PVOID;
using PALPC_MESSAGE_VIEW = PVOID;
using PALPC_PORT_ATTRIBUTES = PVOID;
using PALPC_SECURITY_ATTR = PVOID;
using PBOOT_ENTRY = PVOID;
using PCONTEXT = PVOID;
using PDRIVER_ENTRY = PVOID;
using PEXCEPTION_RECORD = PVOID;
using PGENERIC_MAPPING = PVOID;
using PGROUP_AFFINITY = PVOID;
using PGUID = PVOID;
using PIO_APC_ROUTINE = PVOID;
using PIO_RING_STRUCTV1 = PVOID;
using PKTMOBJECT_CURSOR = PVOID;
using PLUID = PVOID;
using PNT_IORING_CAPABILITIES = PVOID;
using PNT_IORING_INFO = PVOID;
using POBJECT_TYPE_LIST = PVOID;
using PPLUGPLAY_EVENT_BLOCK = PVOID;
using PPORT_VIEW = PVOID;
using PPRIVILEGE_SET = PVOID;
using PPS_APC_ROUTINE = PVOID;
using PREMOTE_PORT_VIEW = PVOID;
using PSECURITY_ATTRIBUTES = PVOID;
using PSECURITY_DESCRIPTOR = PVOID;
using PSID = PVOID;
using PSID_AND_ATTRIBUTES = PVOID;
using PTIMER_APC_ROUTINE = PVOID;
using PTOKEN_DEFAULT_DACL = PVOID;
using PTOKEN_GROUPS = PVOID;
using PTOKEN_MANDATORY_POLICY = PVOID;
using PTOKEN_OWNER = PVOID;
using PTOKEN_PRIMARY_GROUP = PVOID;
using PTOKEN_PRIVILEGES = PVOID;
using PTOKEN_SECURITY_ATTRIBUTES_INFORMATION = PVOID;
using PTOKEN_SOURCE = PVOID;
using PTOKEN_USER = PVOID;
using PTRANSACTION_NOTIFICATION = PVOID;

using KAFFINITY = ULONG_PTR;

using RTL_ATOM = USHORT;

//[Atom]
NTSTATUS
NTAPI
NtAddAtom(
    _In_ PWSTR AtomName,
    _In_ ULONG AtomNameLength,
    _Out_ PRTL_ATOM Atom
    );

//[Atom]
NTSTATUS
NTAPI
NtAddAtomEx(
    _In_ PWSTR AtomName,
    _In_ ULONG AtomNameLength,
    _Out_ PRTL_ATOM Atom,
    ULONG Scope
    );

//[Atom]
NTSTATUS
NTAPI
NtDeleteAtom(
    _In_ RTL_ATOM Atom
    );

//[Atom]
NTSTATUS
NTAPI
NtFindAtom(
    _In_ PWSTR AtomName,
    _In_ ULONG AtomNameLength,
    _Out_opt_ PRTL_ATOM Atom
    );

//[Atom]
NTSTATUS
NTAPI
NtQueryInformationAtom(
    _In_ RTL_ATOM Atom,
    _In_ ATOM_INFORMATION_CLASS AtomInformationClass,
    _Out_ PVOID AtomInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Debug]
NTSTATUS
NTAPI
NtCreateProfile(
    _Out_ PHANDLE ProfileHandle,
    _In_ HANDLE Process,
    _In_ PVOID ProfileBase,
    _In_ ULONG ProfileSize,
    _In_ ULONG BucketSize,
    _In_ PULONG Buffer,
    _In_ ULONG BufferSize,
    _In_ KPROFILE_SOURCE ProfileSource,
    _In_ KAFFINITY Affinity
    );

//[Debug]
NTSTATUS
NTAPI
NtCreateProfileEx(
    _Out_ PHANDLE ProfileHandle,
    _In_opt_ HANDLE Process,
    _In_ PVOID ProfileBase,
    _In_ ULONG ProfileSize,
    _In_ ULONG BucketSize,
    _In_ PULONG Buffer,
    _In_ ULONG BufferSize,
    _In_ ULONG ProfileSource,
    _In_ ULONG GroupAffinityCount,
    _In_opt_ PGROUP_AFFINITY GroupAffinity
    );

//[Debug]
NTSTATUS
NTAPI
NtDebugActiveProcess(
    _In_ HANDLE Process,
    _In_ HANDLE DebugHandle
    );

//[Debug]
NTSTATUS
NTAPI
NtDebugContinue(
    _In_ HANDLE DebugHandle,
    _In_ PCLIENT_ID ClientId,
    _In_ NTSTATUS Status
    );

//[Debug]
NTSTATUS
NTAPI
NtQueryDebugFilterState(
    _In_ ULONG Component,
    _In_ ULONG Level
    );

//[Debug]
NTSTATUS
NTAPI
NtQueryIntervalProfile(
    _In_ KPROFILE_SOURCE Source,
    _Out_ PULONG Interval
    );

//[Debug]
NTSTATUS
NTAPI
NtQueryPerformanceCounter(
    _Out_ PLARGE_INTEGER Counter,
    _Out_opt_ PLARGE_INTEGER Freq
    );

//[Debug]
NTSTATUS
NTAPI
NtRegisterThreadTerminatePort(
    _In_ HANDLE PortHandle
    );

//[Debug]
NTSTATUS
NTAPI
NtRemoveProcessDebug(
    _In_ HANDLE ProcessHandle,
    _In_ HANDLE DebugHandle
    );

//[Debug]
NTSTATUS
NTAPI
NtSetDebugFilterState(
    _In_ ULONG Component,
    _In_ ULONG Level,
    _In_ BOOLEAN State
    );

//[Debug]
NTSTATUS
NTAPI
NtSetInformationDebugObject(
    _In_ HANDLE DebugHandle,
    _In_ DEBUGOBJECTINFOCLASS Class,
    _In_ PVOID Buffer,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Debug]
NTSTATUS
NTAPI
NtSetIntervalProfile(
    _In_ ULONG Interval,
    _In_ KPROFILE_SOURCE Source
    );

//[Debug]
NTSTATUS
NTAPI
NtStartProfile(
    _In_ HANDLE ProfileHandle
    );

//[Debug]
NTSTATUS
NTAPI
NtStopProfile(
    _In_ HANDLE ProfileHandle
    );

//[Debug]
NTSTATUS
NTAPI
NtSystemDebugControl(
    _In_ SYSDBG_COMMAND Command,
    _In_ PVOID InputBuffer,
    _In_ ULONG InputBufferLength,
    _Out_ PVOID OutputBuffer,
    _In_ ULONG OutputBufferLength,
    _Out_ PULONG ReturnLength
    );

//[Debug]
NTSTATUS
NTAPI
NtTraceControl(
    _In_ ULONG CtrlCode,
    _In_ PVOID InputBuffer,
    _In_ ULONG InputBufferLength,
    _Out_ PVOID OutputBuffer,
    _In_ ULONG OutputBufferLength,
    _Out_ PULONG ReturnLength
    );

//[Debug]
NTSTATUS
NTAPI
NtWaitForDebugEvent(
    _In_ HANDLE DebugHandle,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout,
    _Out_ PULONG Result
    );

//[Device]
NTSTATUS
NTAPI
NtAddBootEntry(
    _In_ PUNICODE_STRING Name,
    _In_ PUNICODE_STRING Value
    );

//[Device]
NTSTATUS
NTAPI
NtAddDriverEntry(
    _In_ PUNICODE_STRING Name,
    _In_ PUNICODE_STRING Path
    );

//[Device]
NTSTATUS
NTAPI
NtCancelDeviceWakeupRequest(
    _In_ HANDLE DeviceHandle
    );

//[Device]
NTSTATUS
NTAPI
NtDeleteBootEntry(
    _In_ PUNICODE_STRING Name
    );

//[Device]
NTSTATUS
NTAPI
NtDeleteDriverEntry(
    _In_ PUNICODE_STRING Name
    );

//[Device]
NTSTATUS
NTAPI
NtDisableLastKnownGood(
    );

//[Device]
NTSTATUS
NTAPI
NtEnableLastKnownGood(
    );

//[Device]
NTSTATUS
NTAPI
NtEnumerateBootEntries(
    _In_ PVOID Buffer,
    _In_ PULONG BufferLength
    );

//[Device]
NTSTATUS
NTAPI
NtEnumerateDriverEntries(
    _In_ PVOID Buffer,
    _In_ PULONG BufferLength
    );

//[Device]
NTSTATUS
NTAPI
NtGetDevicePowerState(
    _In_ HANDLE DeviceHandle,
    _Out_ PDEVICE_POWER_STATE State
    );

//[Device]
NTSTATUS
NTAPI
NtGetPlugPlayEvent(
  _In_ HANDLE EventHandle,
  _In_opt_ PVOID Context,
  _Out_ PPLUGPLAY_EVENT_BLOCK EventBlock,
  _In_ ULONG EventBufferSize
    );

//[Device]
NTSTATUS
NTAPI
NtInitiatePowerAction(
    _In_ POWER_ACTION Action,
    _In_ SYSTEM_POWER_STATE State,
    _In_ ULONG Flags,
    _In_ BOOLEAN Asynch
    );

//[Device]
NTSTATUS
NTAPI
NtLoadDriver(
    _In_ PUNICODE_STRING DriverName
    );

//[Device]
NTSTATUS
NTAPI
NtModifyBootEntry(
    _In_ PBOOT_ENTRY BootEntry
    );

//[Device]
NTSTATUS
NTAPI
NtModifyDriverEntry(
    _In_ PDRIVER_ENTRY DriverEntry
    );

//[Device]
NTSTATUS
NTAPI
NtPlugPlayControl(
    _In_ ULONG Class,
    _Inout_ PVOID Buffer,
    _In_ ULONG BufferSize
    );

//[Device]
NTSTATUS
NTAPI
NtPowerInformation(
    _In_ POWER_INFORMATION_LEVEL InformationLevel,
    _In_opt_ PVOID InputBuffer,
    _In_ ULONG InputLength,
    _Out_ PVOID OutputBuffer,
    _In_ ULONG OutputLength
    );

//[Device]
NTSTATUS
NTAPI
NtQueryBootEntryOrder(
    _In_opt_ PULONG OrderArray,
    _Inout_ PULONG OrderCount
    );

//[Device]
NTSTATUS
NTAPI
NtQueryBootOptions(
    _Out_opt_ PVOID Buffer,
    _Inout_ PULONG BufferLength
    );

//[Device]
NTSTATUS
NTAPI
NtQueryDriverEntryOrder(
    _Out_opt_ PULONG OrderArray,
    _Inout_ PULONG OrderCount
    );

//[Device]
NTSTATUS
NTAPI
NtReplacePartitionUnit(
  _In_ PUNICODE_STRING TargetInstancePath,
  _In_ PUNICODE_STRING SpareInstancePath,
  _In_ ULONG Flags
    );

//[Device]
NTSTATUS
NTAPI
NtRequestDeviceWakeup(
    _In_ HANDLE DeviceHandle
    );

//[Device]
NTSTATUS
NTAPI
NtRequestWakeupLatency(
    _In_ ULONG LatencyTime
    );

//[Device]
NTSTATUS
NTAPI
NtSerializeBoot(
    );

//[Device]
NTSTATUS
NTAPI
NtSetBootEntryOrder(
    _In_ PULONG OrderArray,
    _In_ ULONG OrderCount
    );

//[Device]
NTSTATUS
NTAPI
NtSetBootOptions(
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength
    );

//[Device]
NTSTATUS
NTAPI
NtSetDriverEntryOrder(
    _In_ PULONG OrderArray,
    _In_ ULONG OrderCount
    );

//[Device]
NTSTATUS
NTAPI
NtSetSystemPowerState(
    _In_ POWER_ACTION Action,
    _In_ SYSTEM_POWER_STATE State,
    _In_ ULONG Flags
    );

//[Device]
NTSTATUS
NTAPI
NtSetThreadExecutionState(
    _In_ ULONG State,
    _Out_ PULONG PreviousState
    );

//[Device]
NTSTATUS
NTAPI
NtUnloadDriver(
    _In_ PUNICODE_STRING DriverName
    );

//[Device]
NTSTATUS
NTAPI
NtVdmControl(
    _In_ ULONG ControlCode,
    _In_ PVOID ControlData
    );

//[Environment]
NTSTATUS
NTAPI
NtCreateCpuPartition(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Environment]
NTSTATUS
NTAPI
NtEnumerateSystemEnvironmentValuesEx(
    _In_ ULONG Class,
    _Out_ PVOID Buffer,
    _In_ ULONG BufferLength
    );

//[Environment]
ULONG
NTAPI
NtGetCurrentProcessorNumber(
    );

//[Environment]
NTSTATUS
NTAPI
NtGetCurrentProcessorNumberEx(
    _Out_opt_ PULONG ProcNumber
    );

//[Environment]
NTSTATUS
NTAPI
NtIsSystemResumeAutomatic(
    );

//[Environment]
NTSTATUS
NTAPI
NtOpenCpuPartition(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Environment]
NTSTATUS
NTAPI
NtQueryDefaultLocale(
    _In_ BOOLEAN UserProfile,
    _Out_ PLCID DefaultLocaleId
    );

//[Environment]
NTSTATUS
NTAPI
NtQueryDefaultUILanguage(
    _Out_ PULONG LanguageId
    );

//[Environment]
NTSTATUS
NTAPI
NtQueryInformationCpuPartition(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Environment]
NTSTATUS
NTAPI
NtQueryInstallUILanguage(
    _Out_ PULONG LanguageId
    );

//[Environment]
NTSTATUS
NTAPI
NtQuerySystemEnvironmentValue(
    _In_ PUNICODE_STRING Name,
    _Out_ PWSTR Value,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Environment]
NTSTATUS
NTAPI
NtQuerySystemEnvironmentValueEx(
    _In_ PUNICODE_STRING VariableName,
    _In_ PVOID Guid,
    _Out_ PVOID Buffer,
    _Inout_ PULONG BufferLength,
    _Inout_ PULONG Attributes
    );

//[Environment]
NTSTATUS
NTAPI
NtQuerySystemInformation(
    _In_ SYSTEM_INFORMATION_CLASS SystemInformationClass,
    _Out_ PVOID SystemInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Environment]
NTSTATUS
NTAPI
NtQuerySystemInformationEx(
    _In_ SYSTEM_INFORMATION_CLASS SystemInformationClass,
    _In_ PULONG QueryType,
    _In_ ULONG Alignment,
    _Out_ PVOID SystemInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Environment]
NTSTATUS
NTAPI
NtSetDefaultLocale(
    _In_ BOOLEAN UserProfile,
    _In_ LCID LocaleId
    );

//[Environment]
NTSTATUS
NTAPI
NtSetDefaultUILanguage(
    _In_ ULONG LanguageId
    );

//[Environment]
NTSTATUS
NTAPI
NtSetInformationCpuPartition(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Environment]
NTSTATUS
NTAPI
NtSetSystemEnvironmentValue(
    _In_ PUNICODE_STRING Name,
    _In_ PUNICODE_STRING Value
    );

//[Environment]
NTSTATUS
NTAPI
NtSetSystemEnvironmentValueEx(
    _In_ PUNICODE_STRING Name,
    _In_ PVOID Guid,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength,
    _In_ ULONG Attributes
    );

//[Environment]
NTSTATUS
NTAPI
NtSetSystemInformation(
    _In_ SYSTEM_INFORMATION_CLASS SystemInformationClass,
    _In_ PVOID SystemInformation,
    _In_ ULONG Length
    );

//[Environment]
ULONG
NTAPI
NtWow64GetCurrentProcessorNumber(
    );

ULONG
NTAPI
NtWow64GetCurrentProcessorNumberEx(
    _Out_ PPROCESSOR_NUMBER ProcNumber
    );

//[File]
NTSTATUS
NTAPI
NtAreMappedFilesTheSame(
    _In_ PVOID Address1,
    _In_ PVOID Address2
    );

//[File]
NTSTATUS
NTAPI
NtAssociateWaitCompletionPacket(
    _In_ HANDLE WaitCompletionPacketHandle,
    _In_ HANDLE IoCompletionHandle,
    _In_ HANDLE TargetObjectHandle,
    _In_opt_ PVOID KeyContext,
    _In_opt_ PVOID ApcContext,
    _In_ NTSTATUS IoStatus,
    _In_ ULONG_PTR IoStatusInformation,
    _Out_opt_ PBOOLEAN AlreadySignaled
    );

//[File]
NTSTATUS
NTAPI
NtCancelIoFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );

//[File]
NTSTATUS
NTAPI
NtCancelIoFileEx(
    _In_ HANDLE hFile,
    _In_ PIO_STATUS_BLOCK IoStatusBlockIn,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );

//[File]
NTSTATUS
NTAPI
NtCancelSynchronousIoFile(
    _In_ HANDLE ThreadHandle,
    _In_opt_ PIO_STATUS_BLOCK IoStatusBlockIn,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );

//[File]
NTSTATUS
NTAPI
NtCancelWaitCompletionPacket(
    _In_ HANDLE CompletionHandle,
    _In_ BOOLEAN Flag
    );

//[File]
NTSTATUS
NTAPI
NtClose(
    _In_ HANDLE Handle
    );

//[File]
NTSTATUS
NTAPI
NtCopyFileChunk(
    _In_ HANDLE SourceHandle,
    _In_ HANDLE DestHandle,
    _In_opt_ HANDLE EventHandle,
    _Out_ PIO_STATUS_BLOCK PioStatusBlock,
    _In_ ULONG Length,
    _In_ PLARGE_INTEGER SourceOffset,
    _In_ PLARGE_INTEGER DestOffset,
    _In_opt_ PVOID SourceKey,
    _In_opt_ PVOID DestKey,
    _In_ ULONG Flags
    );

//[File]
NTSTATUS
NTAPI
NtCreateFile(
    _Out_ PHANDLE FileHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_opt_ PLARGE_INTEGER AllocationSize,
    _In_ ULONG FileAttributes,
    _In_ ULONG ShareAccess,
    _In_ ULONG CreateDisposition,
    _In_ ULONG CreateOptions,
    _In_opt_ PVOID EaBuffer,
    _In_ ULONG EaLength
    );

//[File]
NTSTATUS
NTAPI
NtCreateIoCompletion(
    _Out_ PHANDLE IoHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG NumberOfConcurrentThreads
    );

//[File]
NTSTATUS
NTAPI
NtCreateMailslotFile(
    _Out_ PHANDLE Handle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG CreateOptions,
    _In_ ULONG InBufferSize,
    _In_ ULONG MaxMessageSize,
    _In_opt_ PLARGE_INTEGER ReadTimeout
    );

//[File]
NTSTATUS
NTAPI
NtCreateNamedPipeFile(
    _Out_ PHANDLE NamedPipeHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG ShareAccess,
    _In_ ULONG CreateDisposition,
    _In_ ULONG CreateOptions,
    _In_ BOOLEAN MessageType,
    _In_ BOOLEAN MessageRead,
    _In_ BOOLEAN NonBlocking,
    _In_ ULONG MaxInstances,
    _In_ ULONG InBufferSize,
    _In_ ULONG OutBufferSize,
    _In_opt_ PLARGE_INTEGER Timeout
    );

//[File]
NTSTATUS
NTAPI
NtCreatePagingFile(
    _In_ PUNICODE_STRING PageFileName,
    _In_ PLARGE_INTEGER MinSize,
    _In_ PLARGE_INTEGER MaxSize,
    _Out_opt_ PLARGE_INTEGER ActualSize
    );

//[File]
NTSTATUS
NTAPI
NtCreateWaitCompletionPacket(
    _Out_ PHANDLE WaitCompletionPacketHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[File]
NTSTATUS
NTAPI
NtDeleteFile(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[File]
NTSTATUS
NTAPI
NtDeviceIoControlFile(
    _In_ HANDLE FileHandle,
    _In_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG IoControlCode,
    _In_ PVOID InputBuffer,
    _In_ ULONG InputBufferLength,
    _Out_ PVOID OutputBuffer,
    _In_ ULONG OutputBufferLength
    );

//[File]
NTSTATUS
NTAPI
NtFlushBuffersFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );

//[File]
NTSTATUS
NTAPI
NtFlushBuffersFileEx(
    _In_ HANDLE FileHandle,
    _In_ ULONG Flags,
    _In_ PVOID Parameters,
    _In_ ULONG ParametersSize,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );

//[File]
NTSTATUS
NTAPI
NtFsControlFile(
    _In_ HANDLE FileHandle,
    _In_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE UserApcRoutine,
    _In_opt_ PVOID UserApcContext,
    _Out_ PIO_STATUS_BLOCK UserIoStatus,
    _In_ ULONG FsControlCode,
    _In_opt_ PVOID InputBuffer,
    _In_opt_ ULONG InputBufferLength,
    _Out_opt_ PVOID OutputBuffer,
    _In_opt_ ULONG OutputBufferLength
    );

//[File]
NTSTATUS
NTAPI
NtLockFile(
    _In_ HANDLE FileHandle,
    _In_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PLARGE_INTEGER Offset,
    _In_ PLARGE_INTEGER Length,
    _In_ ULONG Key,
    _In_ BOOLEAN FailImmediately,
    _In_ BOOLEAN ExclusiveLock
    );

//[File]
NTSTATUS
NTAPI
NtNotifyChangeDirectoryFile(
    _In_ HANDLE DirectoryHandle,
    _In_ HANDLE EventHandle,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_ PVOID Buffer,
    _In_ ULONG BufferLength,
    _In_ ULONG CompletionFilter,
    _In_ BOOLEAN Recursive
    );

//[File]
NTSTATUS
NTAPI
NtNotifyChangeDirectoryFileEx(
  _In_     HANDLE                             FileHandle,
  _In_opt_ HANDLE                             Event,
  _In_opt_ PIO_APC_ROUTINE                    ApcRoutine,
  _In_opt_ PVOID                              ApcContext,
  _Out_    PIO_STATUS_BLOCK                   IoStatusBlock,
  _Out_    PVOID                              Buffer,
  _In_     ULONG                              Length,
  _In_     ULONG                              CompletionFilter,
  _In_     BOOLEAN                            WatchTree,
  _In_opt_ DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass
    );

//[File]
NTSTATUS
NTAPI
NtOpenFile(
    _Out_ PHANDLE FileHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG ShareAccess,
    _In_ ULONG OpenOptions
    );

//[File]
NTSTATUS
NTAPI
NtOpenIoCompletion(
    _Out_ PHANDLE Handle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[File]
NTSTATUS
NTAPI
NtQueryAttributesFile(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PFILE_BASIC_INFORMATION Attributes
    );

//[File]
NTSTATUS
NTAPI
NtQueryDirectoryFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_ PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass,
    _In_ BOOLEAN ReturnSingleEntry,
    _In_opt_ PUNICODE_STRING FileName,
    _In_ BOOLEAN RestartScan
    );


//[File]
NTSTATUS
NTAPI
NtQueryDirectoryFileEx(
  _In_     HANDLE                 FileHandle,
  _In_opt_ HANDLE                 Event,
  _In_opt_ PIO_APC_ROUTINE        ApcRoutine,
  _In_opt_ PVOID                  ApcContext,
  _Out_    PIO_STATUS_BLOCK       IoStatusBlock,
  _Out_    PVOID                  FileInformation,
  _In_     ULONG                  Length,
  _In_     FILE_INFORMATION_CLASS FileInformationClass,
  _In_     ULONG                  QueryFlags,
  _In_opt_ PUNICODE_STRING        FileName
    );

//[File]
NTSTATUS
NTAPI
NtQueryEaFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_ PVOID Buffer,
    _In_ ULONG Length,
    _In_ BOOLEAN SingleEntry,
    _In_opt_ PVOID Eas,
    _In_ ULONG EasLength,
    _In_opt_ PULONG Index,
    _In_ BOOLEAN Restart
    );

//[File]
NTSTATUS
NTAPI
NtQueryFullAttributesFile(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PFILE_NETWORK_OPEN_INFORMATION Attributes
    );

//[File]
NTSTATUS
NTAPI
NtQueryInformationByName(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_ PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass
    );

//[File]
NTSTATUS
NTAPI
NtQueryInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_ PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass
    );

//[File]
NTSTATUS
NTAPI
NtQueryIoCompletion(
    _In_ HANDLE IoHandle,
    _In_ ULONG Class,
    _Out_ PVOID IoInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[File]
NTSTATUS
NTAPI
NtQueryOleDirectoryFile(
    );

//[File]
NTSTATUS
NTAPI
NtQueryQuotaInformationFile(
  _In_      HANDLE FileHandle,
  _Out_     PIO_STATUS_BLOCK IoStatusBlock,
  _Out_     PVOID Buffer,
  _In_      ULONG Length,
  _In_      BOOLEAN ReturnSingleEntry,
  _In_opt_  PVOID SidList,
  _In_      ULONG SidListLength,
  _In_opt_  PSID StartSid,
  _In_      BOOLEAN RestartScan
    );

//[File]
NTSTATUS
NTAPI
NtQueryVolumeInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_ PVOID FsInformation,
    _In_ ULONG Length,
    _In_ FS_INFORMATION_CLASS FsInformationClass
    );

//[File]
NTSTATUS
NTAPI
NtReadFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _Out_ PVOID Buffer,
    _In_ ULONG Length,
    _In_opt_ PLARGE_INTEGER ByteOffset,
    _In_opt_ PULONG Key
    );

//[File]
NTSTATUS
NTAPI
NtReadFileScatter(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength,
    _In_ PLARGE_INTEGER Offset,
    _In_opt_ PULONG Key
    );

//[File]
NTSTATUS
NTAPI
NtRemoveIoCompletion(
    _In_ HANDLE IoHandle,
    _Out_ PULONG Key,
    _Out_ PVOID Overlapped,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PLARGE_INTEGER Timeout
    );

//[File]
NTSTATUS
NTAPI
NtRemoveIoCompletionEx(
  _In_ HANDLE IoCompletionHandle,
  _Out_ PVOID IoCompletionInformation,
  _In_ ULONG Count,
  _Out_ PULONG NumEntriesRemoved,
  _In_opt_ PLARGE_INTEGER Timeout,
  _In_ BOOLEAN Alertable
    );

//[File]
NTSTATUS
NTAPI
NtSetEaFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength
    );

//[File]
NTSTATUS
NTAPI
NtSetInformationFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PVOID FileInformation,
    _In_ ULONG Length,
    _In_ FILE_INFORMATION_CLASS FileInformationClass
    );

//[File]
NTSTATUS
NTAPI
NtSetIoCompletion(
    _In_ HANDLE IoHandle,
    _In_ ULONG Key,
    _Inout_ PVOID Overlapped,
    _In_ NTSTATUS Status,
    _In_ ULONG DataLength
    );

//[File]
NTSTATUS
NTAPI
NtSetIoCompletionEx(
    _In_ HANDLE IoCompletionHandle,
    _In_ HANDLE IoCompletionReserveHandle,
    _In_ PVOID KeyContext,
    _In_opt_ PVOID ApcContext,
    _In_ NTSTATUS IoStatus,
    _In_ ULONG IoStatusInformation
    );

//[File]
NTSTATUS
NTAPI
NtSetQuotaInformationFile(
  _In_   HANDLE FileHandle,
  _Out_  PIO_STATUS_BLOCK IoStatusBlock,
  _In_   PVOID Buffer,
  _In_   ULONG Length
    );

//[File]
NTSTATUS
NTAPI
NtSetVolumeInformationFile(
  _In_   HANDLE FileHandle,
  _Out_  PIO_STATUS_BLOCK IoStatusBlock,
  _In_   PVOID FsInformation,
  _In_   ULONG Length,
  _In_   FS_INFORMATION_CLASS FsInformationClass
    );

//[File]
NTSTATUS
NTAPI
NtTranslateFilePath(
    _In_ PVOID InputPath,
    _In_ ULONG OutputType,
    _Out_ PVOID OutputFilePath,
    _In_ ULONG OutputFilePathLength 
    );

//[File]
NTSTATUS
NTAPI
NtUnlockFile(
    _In_ HANDLE FileHandle,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PLARGE_INTEGER Offset,
    _In_ PLARGE_INTEGER Length,
    _In_ ULONG Key
    );

//[File]
NTSTATUS
NTAPI
NtWriteFile(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PVOID Buffer,
    _In_ ULONG Length,
    _In_opt_ PLARGE_INTEGER ByteOffset,
    _In_opt_ PULONG Key
    );

//[File]
NTSTATUS
NTAPI
NtWriteFileGather(
    _In_ HANDLE FileHandle,
    _In_opt_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ PVOID Segments,
    _In_ ULONG Length,
    _In_ PLARGE_INTEGER ByteOffset,
    _In_opt_ PULONG Key
    );

//[IoRing]
NTSTATUS
NTAPI
NtCreateIoRing(
    _Out_ PHANDLE pIoRingHandle,
    _In_ ULONG CreateParametersSize,
    _In_ PIO_RING_STRUCTV1 CreateParameters,
    _In_ ULONG OutputParametersSize,
    _Out_ PNT_IORING_INFO pRingInfo
    );

//[IoRing]
NTSTATUS
NTAPI
NtQueryIoRingCapabilities(
	_In_ SIZE_T CapabilitiesLength,
	_Out_ PNT_IORING_CAPABILITIES Capabilities
  );

//[IoRing]
NTSTATUS
NTAPI
NtSetInformationIoRing(
	  _In_ HANDLE Handle,
	  _In_ ULONG InformationClass,
	  _In_ ULONG InformationLength,
	  _In_ PVOID IoRingInformation
    );

//[IoRing]
NTSTATUS
NTAPI
NtSubmitIoRing(
    _In_ HANDLE Handle,
    _In_ IORING_CREATE_REQUIRED_FLAGS Flags,
    _In_ ULONG EntryCount,
    _In_ PLARGE_INTEGER Timeout
    );

//[Job]
NTSTATUS
NTAPI
NtAssignProcessToJobObject(
    _In_ HANDLE JobHandle,
    _In_ HANDLE ProcessHandle
    );

//[Job]
NTSTATUS
NTAPI
NtCreateJobObject(
    _Out_ PHANDLE JobHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Job]
NTSTATUS
NTAPI
NtCreateJobSet(
    _In_ ULONG JobNumber,
    _In_ PVOID UserJobSet,
    _In_ ULONG Flags
    );

//[Job]
NTSTATUS
NTAPI
NtIsProcessInJob(
    _In_ HANDLE hProcess,
    _In_opt_ HANDLE hJob
    );

//[Job]
NTSTATUS
NTAPI
NtOpenJobObject(
    _Out_ PHANDLE JobHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Job]
NTSTATUS
NTAPI
NtQueryInformationJobObject(
    _In_ HANDLE JobHandle,
    _In_ JOB_INFORMATION_CLASS JobInformationClass,
    _Out_ PVOID JobInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Job]
NTSTATUS
NTAPI
NtSetInformationJobObject(
    _In_ HANDLE Handle,
    _In_ JOB_INFORMATION_CLASS Class,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength
    );

//[Job]
NTSTATUS
NTAPI
NtTerminateJobObject(
    _In_ HANDLE JobHandle,
    _In_ NTSTATUS ExitStatus
    );

//[LPC]
NTSTATUS
NTAPI
NtAcceptConnectPort(
    _Out_ PHANDLE PortHandle,
    _In_opt_ PVOID PortContext,
    _In_ PPORT_MESSAGE ConnectionRequest,
    _In_ BOOLEAN AcceptConnection,
    _Inout_opt_ PPORT_VIEW ServerView,
    _Out_opt_ PREMOTE_PORT_VIEW ClientView
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcAcceptConnectPort(
    _Out_ PHANDLE PortHandle,
    _In_ HANDLE ConnectionPortHandle, 
    _In_ ULONG Flags,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ PALPC_PORT_ATTRIBUTES PortAttributes,
    _In_opt_ PVOID PortContext,
    _In_ PPORT_MESSAGE ConnectionRequest,
    _Inout_opt_ PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes,
    _In_ BOOLEAN AcceptConnection
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcCancelMessage(
    _In_ HANDLE PortHandle,
    _In_ ULONG Flags,
    _In_ PALPC_CONTEXT_ATTR MessageContext
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcConnectPort(
  _Out_ PHANDLE PortHandle,
  _In_ PUNICODE_STRING PortName,
  _In_ POBJECT_ATTRIBUTES ObjectAttributes,
  _In_opt_ PALPC_PORT_ATTRIBUTES PortAttributes,
  _In_ ULONG Flags,
  _In_opt_ PSID RequiredServerSid,
  _Inout_ PPORT_MESSAGE ConnectionMessage,
  _Inout_opt_ PULONG BufferLength,
  _Inout_opt_ PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes,
  _Inout_opt_ PALPC_MESSAGE_ATTRIBUTES InMessageAttributes,
  _In_opt_ PLARGE_INTEGER Timeout 
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcConnectPortEx(
  _Out_ PHANDLE PortHandle,
  _In_ PUNICODE_STRING PortName,
  _In_ POBJECT_ATTRIBUTES ObjectAttributes,
  _In_ PALPC_INFO PortInformation,
  _In_ ULONG ConnectionFlags,
  _In_ PSECURITY_DESCRIPTOR pSelfRelativeSD,
  _Inout_ PPORT_MESSAGE ConnectionMessage,
  _Inout_opt_ PULONG BufferLength,
  _Inout_opt_ PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes,
  _Inout_opt_ PALPC_MESSAGE_ATTRIBUTES InMessageAttributes,
  _In_opt_ PLARGE_INTEGER Timeout 
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcCreatePort(
    _Out_ PHANDLE PortHandle,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _Inout_opt_ PALPC_INFO PortInformation
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcCreatePortSection(
    _In_ HANDLE PortHandle,
    _In_ ULONG AlpcSectionFlag,
    _In_opt_ HANDLE SectionHandle,
    _In_ ULONG SectionSize,
    _Out_ PHANDLE AlpcSectionHandle,
    _Out_ PULONG ResSize
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcCreateResourceReserve(
  _In_ HANDLE PortHandle,
  _In_ ULONG Flags,
  _In_ ULONG MessageSize,
  _Out_ PHANDLE ResourceId
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcCreateSectionView(
    HANDLE PortHandle,
    ULONG FlagUnusedMustbeZero,
    PALPC_MESSAGE_VIEW pMessageBuffer
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcCreateSecurityContext(
  _In_ HANDLE PortHandle,
  _In_ ULONG Flags,
  _Inout_ PALPC_SECURITY_ATTR SecurityAttribute 
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcDeletePortSection(
  _In_ HANDLE PortHandle,
  _In_ ULONG Flags,
  _In_ HANDLE SectionHandle
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcDeleteResourceReserve(
  _In_ HANDLE PortHandle,
  _In_ ULONG Flags,
  _In_ HANDLE ResourceHandle
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcDeleteSectionView(
  _In_ HANDLE PortHandle,
  _In_ ULONG Flags,
  _In_ PVOID ViewBase
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcDeleteSecurityContext(
  _In_ HANDLE PortHandle,
  _In_ ULONG Flags,
  _In_ HANDLE ContextHandle
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcDisconnectPort(
  _In_ HANDLE PortHandle,
  _In_ ULONG Flags
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcImpersonateClientContainerOfPort(
  _In_ HANDLE PortHandle,
  _In_ PPORT_MESSAGE Message,
  _In_ ULONG Flags
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcImpersonateClientOfPort(
  _In_ HANDLE PortHandle,
  _In_ PPORT_MESSAGE PortMessage,
  _In_ PVOID Reserved
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcOpenSenderProcess(
  _Out_ PHANDLE ProcessHandle,
  _In_ HANDLE PortHandle,
  _In_ PPORT_MESSAGE PortMessage,
  _In_ ULONG Flags,
  _In_ ACCESS_MASK DesiredAccess,
  _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcOpenSenderThread(
  _Out_ PHANDLE ThreadHandle,
  _In_ HANDLE PortHandle,
  _In_ PPORT_MESSAGE PortMessage,
  _In_ ULONG Flags,
  _In_ ACCESS_MASK DesiredAccess,
  _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcQueryInformation(
  _In_ HANDLE PortHandle,
  _In_ ALPC_PORT_INFORMATION_CLASS PortInformationClass,
  _Out_ PVOID PortInformation,
  _In_ ULONG Length,
  _Out_opt_ PULONG ReturnLength
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcQueryInformationMessage(
  _In_ HANDLE PortHandle,
  _In_ PPORT_MESSAGE PortMessage,
  _In_ ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass,
  _Out_ PVOID MessageInformation,
  _In_ ULONG Length,
  _Out_opt_ PULONG ReturnLength
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcRevokeSecurityContext(
  _In_ HANDLE PortHandle,
  _In_ ULONG Flags,
  _In_ HANDLE ContextHandle
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcSendWaitReceivePort(
    _In_ HANDLE PortHandle,
    _In_ ULONG SendFlags,
    _In_opt_ PLPC_MESSAGE SendMessage,
    _Inout_opt_ PVOID InMessageBuffer,
    _Out_opt_ PLPC_MESSAGE ReceiveBuffer,
    _Inout_opt_ PULONG ReceiveBufferSize,
    _Inout_opt_ PVOID OutMessageBuffer,
    _In_opt_ PLARGE_INTEGER Timeout
    );

//[LPC]
NTSTATUS
NTAPI
NtAlpcSetInformation(
  _In_ HANDLE PortHandle,
  _In_ ALPC_PORT_INFORMATION_CLASS PortInformationClass,
  _In_ PVOID PortInformation,
  _In_ ULONG Length
    );

//[LPC]
NTSTATUS
NTAPI
NtCompleteConnectPort(
    _In_ HANDLE PortHandle
    );

//[LPC]
NTSTATUS
NTAPI
NtConnectPort(
    _Out_ PHANDLE PortHandle,
    _In_ PUNICODE_STRING PortName,
    _In_ PVOID SecurityQos,
    _Inout_opt_ PPORT_VIEW ClientView,
    _Out_opt_ PREMOTE_PORT_VIEW ServerView,
    _Out_opt_ PULONG MaxMsgLength,
    _Inout_opt_ PVOID ConnectionInfo,
    _Inout_opt_ PULONG ConnectionInfoLength
    );

//[LPC]
NTSTATUS
NTAPI
NtCreateChannel(
    _Out_ PHANDLE ChannelHandle,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[LPC]
NTSTATUS
NTAPI
NtCreatePort(
    _Out_ PHANDLE PortHandle,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG MaxConnectionInfoLength,
    _In_ ULONG MaxMsgLength,
    _In_ ULONG MaxPoolUsage
    );

//[LPC]
NTSTATUS
NTAPI
NtCreateWaitablePort(
    _Out_ PHANDLE PortHandle,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG MaxConnectionInfoLength,
    _In_ ULONG MaxMsgLength,
    _In_ ULONG MaxPoolUsage
    );

//[LPC]
NTSTATUS
NTAPI
NtImpersonateClientOfPort(
    _In_ HANDLE PortHandle,
    _In_ PLPC_MESSAGE Message
    );

//[LPC]
NTSTATUS
NTAPI
NtListenChannel(
    _In_ HANDLE Handle,
    _Out_ PVOID Message
    );

//[LPC]
NTSTATUS
NTAPI
NtListenPort(
    _In_ HANDLE Handle,
    _Out_ PLPC_MESSAGE ConnectionData
    );

//[LPC]
NTSTATUS
NTAPI
NtOpenChannel(
    _Out_ PHANDLE ChannelHandle,
    _In_ PUNICODE_STRING ChannelName
    );

//[LPC]
NTSTATUS
NTAPI
NtQueryInformationPort(
    _In_ HANDLE JobHandle,
    _In_ PORT_INFORMATION_CLASS PortInformationClass,
    _Out_ PVOID PortInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[LPC]
NTSTATUS
NTAPI
NtQueryPortInformationProcess(
    );

//[LPC]
NTSTATUS
NTAPI
NtReadRequestData(
    _In_ HANDLE Handle,
    _In_ PLPC_MESSAGE Request,
    _In_ ULONG Index,
    _Out_ PVOID Buffer,
    _In_ ULONG BufferLength,
    _Out_opt_ PULONG ReturnLength
    );

//[LPC]
NTSTATUS
NTAPI
NtReplyPort(
    _In_ HANDLE PortHandle,
    _In_ PLPC_MESSAGE pMessage
    );

//[LPC]
NTSTATUS
NTAPI
NtReplyWaitReceivePort(
    _In_ HANDLE PortHandle,
    _Out_ PHANDLE ReceiveHandle,
    _In_ PLPC_MESSAGE pMessage,
    _Out_ PLPC_MESSAGE pMessage2
    );

//[LPC]
NTSTATUS
NTAPI
NtReplyWaitReceivePortEx(
    _In_ HANDLE PortHandle,
    _Out_ PHANDLE ReceiveHandle,
    _In_ PLPC_MESSAGE pMessage,
    _Out_ PLPC_MESSAGE pMessage2,
    _In_ PLARGE_INTEGER Timeout
    );

//[LPC]
NTSTATUS
NTAPI
NtReplyWaitReplyPort(
    _In_ HANDLE PortHandle,
    _Inout_ PLPC_MESSAGE pMessage
    );

//[LPC]
NTSTATUS
NTAPI
NtReplyWaitSendChannel(
    _In_ HANDLE ChannelHandle,
    _In_opt_ PVOID ReplyMessage,
    _Out_ PVOID Message
    );

//[LPC]
NTSTATUS
NTAPI
NtRequestPort(
    _In_ HANDLE PortHandle,
    _In_ PLPC_MESSAGE RequestMessage
    );

//[LPC]
NTSTATUS
NTAPI
NtRequestWaitReplyPort(
    _In_ HANDLE PortHandle,
    _In_ PLPC_MESSAGE pRequestMessage,
    _Out_ PLPC_MESSAGE pReplyMessage
    );

//[LPC]
NTSTATUS
NTAPI
NtSecureConnectPort(
    _Out_ PHANDLE PortHandle,
    _In_ PUNICODE_STRING Name,
    _In_ ULONG QOS,
    _Inout_ PPORT_VIEW pSectionInfo,
    _In_ PSID SecurityInfo,
    _Inout_ PREMOTE_PORT_VIEW pSectionMapInfo,
    _Out_ PULONG MaxMsgLength,
    _Inout_opt_ PVOID ConnectData,
    _Inout_opt_ PULONG ConnectDataLength
    );

//[LPC]
NTSTATUS
NTAPI
NtSendWaitReplyChannel(
    _In_ HANDLE ChannelHandle,
    _In_ PVOID RequestMessage,
    _Out_ PVOID ReplyMessage,
    _In_ PLARGE_INTEGER Timeout
    );

//[LPC]
NTSTATUS
NTAPI
NtSetContextChannel(
    _In_ HANDLE ChannelHandle
    );

//[LPC]
NTSTATUS
NTAPI
NtWriteRequestData(
    _In_ HANDLE PortHandle,
    _In_ PLPC_MESSAGE Message,
    _In_ ULONG Index,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength,
    _Out_opt_ PULONG ReturnLength
    );

//[Memory]
NTSTATUS
NTAPI
NtAllocateUserPhysicalPages(
  _In_     HANDLE hProcess,
  _Inout_  PULONG NumberOfPages,
  _Out_    PULONG UserPfnArray
    );

//[Memory]
NTSTATUS
NTAPI
NtAllocateUserPhysicalPagesEx(
    _In_     HANDLE hProcess,
    _Inout_  PULONG NumberOfPages,
    _Out_    PULONG UserPfnArray,
    _Inout_opt_  PVOID DataBuffer,
    _In_     ULONG DataCount
    );

//[Memory]
NTSTATUS
NTAPI
NtAllocateVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _Inout_ PPVOID lpAddress,
    _In_ ULONG_PTR ZeroBits,
    _Inout_ PSIZE_T pSize,
    _In_ ULONG flAllocationType,
    _In_ ULONG flProtect
    );

//[Memory]
NTSTATUS
NTAPI
NtAllocateVirtualMemoryEx(
    _In_ HANDLE ProcessHandle,
    _Inout_ PPVOID lpAddress,
    _In_ ULONG_PTR ZeroBits,
    _Inout_ PSIZE_T pSize,
    _In_ ULONG flAllocationType,
    _Inout_opt_ PVOID DataBuffer,
    _In_ ULONG DataCount
    );

//[Memory]
NTSTATUS
NTAPI
NtCreateEnclave(
    _In_ HANDLE ProcessHandle,
    _Inout_ PVOID *BaseAddress,
    _In_ ULONG_PTR ZeroBits,
    _In_ SIZE_T Size,
    _In_ SIZE_T InitialCommitment,
    _In_ ULONG EnclaveType,
    _In_ PVOID EnclaveInformation,
    _In_ ULONG EnclaveInformationLength,
    _Out_opt_ PULONG EnclaveError
);

//[Memory]
NTSTATUS
NTAPI
NtCreatePartition(
    _In_ HANDLE ParentHandle,
    _Out_ PHANDLE PartitionHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Memory]
NTSTATUS
NTAPI
NtCreateSection(
    _Out_ PHANDLE SectionHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_opt_ PLARGE_INTEGER SectionSize,
    _In_ ULONG Protect,
    _In_ ULONG Attributes,
    _In_ HANDLE FileHandle
    );

//[Memory]
NTSTATUS
NTAPI
NtCreateSectionEx(
    _Out_ PHANDLE SectionHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_opt_ PLARGE_INTEGER SectionSize,
    _In_ ULONG Protect,
    _In_ ULONG Attributes,
    _In_ HANDLE FileHandle,
    _Inout_opt_ PVOID DataBuffer,
    _In_ ULONG DataCount
    );

//[Memory]
NTSTATUS
NTAPI
NtExtendSection(
    _In_ HANDLE SectionHandle,
    _In_ PLARGE_INTEGER SectionSize
    );

//[Memory]
NTSTATUS
NTAPI
NtFlushInstructionCache(
    _In_ HANDLE Process,
    _In_ PVOID BaseAddress,
    _In_ ULONG Size
    );

//[Memory]
NTSTATUS
NTAPI
NtFlushProcessWriteBuffers(
    );

//[Memory]
NTSTATUS
NTAPI
NtFlushVirtualMemory(
  _In_     HANDLE ProcessHandle,
  _Inout_  PPVOID BaseAddress,
  _Inout_  PSIZE_T RegionSize,
  _Out_    PIO_STATUS_BLOCK IoStatus
    );

//[Memory]
NTSTATUS
NTAPI
NtFlushWriteBuffer(
    );

//[Memory]
NTSTATUS
NTAPI
NtFreeUserPhysicalPages(
  _In_     HANDLE hProcess,
  _Inout_  PULONG NumberOfPages,
  _In_     PULONG UserPfnArray
    );

//[Memory]
NTSTATUS
NTAPI
NtFreeVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _Inout_ PPVOID lpAddress,
    _Inout_ PSIZE_T pSize,
    _In_ ULONG flFreeType
    );

//[Memory]
NTSTATUS
NTAPI
NtGetWriteWatch(
    _In_ HANDLE ProcessHandle,
    _In_ ULONG Flags,
    _In_ PVOID BaseAddress,
    _In_ ULONG RegionSize,
    _Out_ PULONG Buffer,
    _Inout_ PULONG BufferEntries,
    _Out_ PULONG Granularity
    );

//[Memory]
NTSTATUS
NTAPI
NtInitializeEnclave(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddress,
    _In_ PVOID EnclaveInformation,
    _In_ ULONG EnclaveInformationLength,
    _Out_opt_ PULONG EnclaveError
);

//[Memory]
NTSTATUS
NTAPI
NtLoadEnclaveData(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddress,
    _In_ PVOID Buffer,
    _In_ SIZE_T BufferSize,
    _In_ ULONG Protect,
    _In_ PVOID PageInformation,
    _In_ ULONG PageInformationLength,
    _Out_opt_ PSIZE_T NumberOfBytesWritten,
    _Out_opt_ PULONG EnclaveError
);

//[Memory]
NTSTATUS
NTAPI
NtLockVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _Inout_ PPVOID lpAddress,
    _Inout_ PSIZE_T pSize,
    _In_ ULONG LockOption
    );

//[Memory]
NTSTATUS
NTAPI
NtManagePartition(
    _In_ HANDLE TargetHandle, 
    _In_ HANDLE SourceHandle, 
    _In_ MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass, 
    _In_ PVOID PartitionInformation, 
    _In_ ULONG PartitionInformationLength
    );

//[Memory]
NTSTATUS
NTAPI
NtMapUserPhysicalPages(
  _In_  PVOID lpAddress,
  _In_  ULONG NumberOfPages,
  _In_  PULONG UserPfnArray
    );

//[Memory]
NTSTATUS
NTAPI
NtMapUserPhysicalPagesScatter(
  _In_ PPVOID VirtualAddresses,
  _In_ ULONG NumberOfPages,
  _In_ PULONG PageArray
    );

//[Memory]
NTSTATUS
NTAPI
NtMapViewOfSection(
    _In_ HANDLE SectionHandle,
    _In_ HANDLE ProcessHandle,
    _Inout_ PPVOID BaseAddress,
    _In_ ULONG ZeroBits,
    _In_ ULONG CommitSize,
    _Inout_opt_ PLARGE_INTEGER SectionOffset,
    _Inout_ PSIZE_T ViewSize,
    _In_ SECTION_INHERIT InheritDisposition,
    _In_ ULONG AllocationType,
    _In_ ULONG Protect
    );

//[Memory]
NTSTATUS
NTAPI
NtMapViewOfSectionEx(
    _In_ HANDLE SectionHandle,
    _In_ HANDLE ProcessHandle,
    _Inout_ PLARGE_INTEGER SectionOffset,
    _Inout_ PPVOID BaseAddress,
    _Inout_ PSIZE_T ViewSize,
    _In_ ULONG AllocationType,
    _In_ ULONG Protect,
    _Inout_opt_ PVOID DataBuffer,
    _In_ ULONG DataCount
    );

//[Memory]
NTSTATUS
NTAPI
NtOpenPartition(
    _Out_ PHANDLE PartitionHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Memory]
NTSTATUS
NTAPI
NtOpenSection(
    _Out_ PHANDLE SectionHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Memory]
NTSTATUS
NTAPI
NtPssCaptureVaSpaceBulk(
    _In_ HANDLE ProcessHandle, 
    _In_ PVOID BaseAddress, 
    _In_ PVOID Buffer, 
    _In_ SIZE_T Length, 
    _Out_ PSIZE_T ReturnLength
    );

//[Memory]
NTSTATUS
NTAPI
NtProtectVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _Inout_ PPVOID BaseAddress,
    _Inout_ PULONG Size,
    _In_ ULONG NewProtect,
    _Out_ PULONG OldProtect
    );

//[Memory]
NTSTATUS
NTAPI
NtQuerySection(
    _In_ HANDLE SectionHandle,
    _In_ SECTION_INFORMATION_CLASS SectionInformationClass,
    _Out_ PVOID SectionInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Memory]
NTSTATUS
NTAPI
NtQueryVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddress,
    _In_ MEMORY_INFORMATION_CLASS MemoryInformationClass,
    _Out_ PVOID MemoryInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Memory]
NTSTATUS
NTAPI
NtReadVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddress,
    _Out_ PVOID Buffer,
    _In_ ULONG BufferSize,
    _Out_ PULONG BytesRead
    );

//[Memory]
NTSTATUS
NTAPI
NtReadVirtualMemoryEx(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddress,
    _Out_ PVOID Buffer,
    _In_ ULONG BufferSize,
    _Out_ PULONG BytesRead,
    _In_ ULONG Flags
    );

//[Memory]
NTSTATUS
NTAPI
NtResetWriteWatch(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddress,
    _In_ ULONG RegionSize
    );

//[Memory]
NTSTATUS
NTAPI
NtSetInformationVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _In_ ULONG VmInformationClass,
    _In_ ULONG_PTR NumberOfEntries,
    _In_ PVOID VirtualAddresses,
    _In_ PVOID VmInformation,
    _In_ ULONG VmInformationLength
    );

//[Memory]
NTSTATUS
NTAPI
NtUnlockVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _Inout_ PPVOID lpAddress,
    _Inout_ PSIZE_T pSize,
    _In_ ULONG LockOption
    );

//[Memory]
NTSTATUS
NTAPI
NtUnmapViewOfSection(
    _In_ HANDLE ProcessHandle,
    _In_opt_ PVOID BaseAddress
    );

//[Memory]
NTSTATUS
NTAPI
NtUnmapViewOfSectionEx(
    _In_ HANDLE ProcessHandle,
    _In_opt_ PVOID BaseAddress,
    _In_ ULONG Flags
    );

//[Memory]
NTSTATUS
NTAPI
NtWriteVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddress,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength,
    _Out_opt_ PULONG ReturnedLength
    );

//[Object]
NTSTATUS
NTAPI
NtAllocateReserveObject(
    _Out_ PHANDLE MemoryReserveHandle,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG Type
    );

//[Object]
NTSTATUS
NTAPI
NtCompareObjects(
    _In_ HANDLE Object1,
    _In_ HANDLE Object2
    );

//[Object]
NTSTATUS
NTAPI
NtCreateDebugObject(
    _Out_ PHANDLE DebugHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG Flags
    );

//[Object]
NTSTATUS
NTAPI
NtCreateDirectoryObject(
    _Out_ PHANDLE DirectoryHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Object]
NTSTATUS
NTAPI
NtCreateDirectoryObjectEx(
    _Out_ PHANDLE DirectoryHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE ShadowDirectoryHandle,
    _In_ ULONG Flags
    );

//[Object]
NTSTATUS
NTAPI
NtCreatePrivateNamespace(
    _Out_ PHANDLE NamespaceHandle,
    _In_opt_ PSECURITY_ATTRIBUTES Attributes,
    _In_ PVOID BoundaryDescriptor,
    _In_ PUNICODE_STRING AliasPrefix
    );

//[Object]
NTSTATUS
NTAPI
NtCreateSymbolicLinkObject(
    _Out_ PHANDLE LinkHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ PUNICODE_STRING SymbolicLink
    );

//[Object]
NTSTATUS
NTAPI
NtDeletePrivateNamespace(
    _In_ HANDLE NamespaceHandle
    );

//[Object]
NTSTATUS
NTAPI
NtDuplicateObject(
    _In_ HANDLE SourceProcess,
    _In_ HANDLE SourceHandle,
    _In_ HANDLE TargetProcess,
    _Out_ PHANDLE TargetHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ BOOL InheritMode,
    _In_ ULONG Options
    );

//[Object]
NTSTATUS
NTAPI
NtMakePermanentObject(
    _In_ HANDLE Object
    );

//[Object]
NTSTATUS
NTAPI
NtMakeTemporaryObject(
    _In_ HANDLE Handle
    );

//[Object]
NTSTATUS
NTAPI
NtOpenDirectoryObject(
    _Out_ PHANDLE DirectoryHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Object]
NTSTATUS
NTAPI
NtOpenObjectAuditAlarm(
    _In_ PUNICODE_STRING SubsystemName,
    _In_ PHANDLE HandleId,
    _In_ PUNICODE_STRING ObjectTypeName,
    _In_ PUNICODE_STRING ObjectName,
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
    _In_ HANDLE ClientToken,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ ACCESS_MASK GrantedAccess,
    _In_ PPRIVILEGE_SET PrivilegeSet,
    _In_ BOOLEAN ObjectCreation,
    _In_ BOOLEAN AccessGranted,
    _Out_ PBOOLEAN OnClose
    );

//[Object]
NTSTATUS
NTAPI
NtOpenPrivateNamespace(
    _Out_ PHANDLE NamespaceHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ PVOID Buffer
    );

//[Object]
NTSTATUS
NTAPI
NtOpenSymbolicLinkObject(
    _Out_ PHANDLE LinkHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Object]
NTSTATUS
NTAPI
NtQueryDirectoryObject(
    _In_ HANDLE DirectoryHandle,
    _Out_ PVOID DirectoryBuffer,
    _In_ ULONG BufferLength,
    _In_ ULONG OnlyFirstEntry,
    _In_ ULONG FirstEntry,
    _Inout_ PULONG Index,
    _Out_opt_ PULONG ReturnedLength
    );

//[Object]
NTSTATUS
NTAPI
NtQueryObject(
    _In_ HANDLE ObjectHandle,
    _In_ OBJECT_INFORMATION_CLASS ObjectInformationClass,
    _Out_ PVOID ObjectInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Object]
NTSTATUS
NTAPI
NtQuerySymbolicLinkObject(
    _In_ HANDLE LinkHandle,
    _Inout_ PUNICODE_STRING LinkTarget,
    _Out_opt_ PULONG ReturnedLength
    );

//[Object]
NTSTATUS
NTAPI
NtSetInformationObject(
    _In_ HANDLE Handle,
    _In_ OBJECT_INFORMATION_CLASS Class,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength
    );

//[Object]
NTSTATUS
NTAPI
NtSetInformationSymbolicLink(
    _In_ HANDLE Handle,
    _In_ ULONG Class,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength
    );

//[Other]
NTSTATUS
NTAPI
NtAcquireCMFViewOwnership(
  _Out_ PLARGE_INTEGER TimeStamp,
  _Out_ PBOOLEAN TokenTaken,
  _In_ BOOLEAN ReplaceExisting
    );

//[Other]
NTSTATUS
NTAPI
NtAllocateLocallyUniqueId(
    _Out_ PLUID Luid
    );

//[Other]
NTSTATUS
NTAPI
NtAllocateUuids(
    _Out_ PLARGE_INTEGER UuidLastTimeAllocated,
    _Out_ PULONG UuidDeltaTime,
    _Out_ PULONG UuidSequenceNumber,
    _Out_ PUCHAR UuidSeed
    );

//[Other]
NTSTATUS
NTAPI
NtCallbackReturn(
    _In_opt_ PVOID Result,
    _In_ ULONG ResultLength,
    _In_ NTSTATUS Status
    );

//[Other]
NTSTATUS
NTAPI
NtCallEnclave(
    _In_ PVOID Function,
    _In_ PVOID Parameter,
    _In_ BOOLEAN WaitForThread,
    _Out_opt_ PVOID *Result
    );

// This one is odd.
//[-Other]
struct _TEB *
NtCurrentTeb(
    );

//[Other]
NTSTATUS
NTAPI
NtDirectGraphicsCall(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Other]
NTSTATUS
NTAPI
NtDisplayString(
    _In_ PUNICODE_STRING Message
    );

//[Other]
NTSTATUS
NTAPI
NtDrawText(
    _In_ PUNICODE_STRING Text
    );

//[Other]
NTSTATUS
NTAPI
NtFlushInstallUILanguage(
  _In_ ULONG InstallUILanguage,
  _In_ ULONG SetComittedFlag
    );

//[Other]
NTSTATUS
NTAPI
NtGetMUIRegistryInfo(
  _In_ ULONG Flags,
  _Inout_ PULONG BufferLength,
  _Out_ PVOID Buffer
    );

//[Other]
NTSTATUS
NTAPI
NtGetNlsSectionPtr(
  _In_ ULONG SectionType,
  _In_ ULONG SectionData,
  _In_ PVOID ContextData,
  _Out_ PPVOID SectionPointer,
  _Out_ PULONG SectionSize
    );

//[-Other]
NTSTATUS
NTAPI
NtGetTickCount(
    );

//[Other]
NTSTATUS
NTAPI
NtInitializeNlsFiles(
  _Out_ PPVOID BaseAddress,
  _Out_ PLCID DefaultLocaleId,
  _Out_ PLARGE_INTEGER DefaultCasingTableSize
    );

//[Other]
NTSTATUS
NTAPI
NtIsUILanguageComitted(
    );

//[Other]
NTSTATUS
NTAPI
NtLoadHotPatch(
    _In_ PUNICODE_STRING HotPatchName,
    _Reserved_ ULONG LoadFlag
    );

//[Other]
NTSTATUS
NTAPI
NtLockProductActivationKeys(
    _In_ PULONG ProductBuild,
    _In_ PULONG SafeMode
    );

//[Other]
NTSTATUS
NTAPI
NtManageHotPatch(
    _In_ HOT_PATCH_INFORMATION_CLASS HotPatchClass,
    _In_ PVOID PatchData,
    _In_ ULONG Length,
    _Out_ PULONG ReturnedLength
    );

//[Other]
NTSTATUS
NTAPI
NtMapCMFModule(
  _In_ ULONG What,
  _In_ ULONG Index,
  _Out_opt_ PULONG CacheIndexOut,
  _Out_opt_ PULONG CacheFlagsOut,
  _Out_opt_ PULONG ViewSizeOut,
  _Out_opt_ PPVOID BaseAddress
    );

//[Other]
NTSTATUS
NTAPI
NtNotifyChangeSession(
    _In_ HANDLE Session,
    _In_ ULONG IoStateSequence,
    _In_ PVOID Reserved,
    _In_ ULONG Action,
    _In_ IO_SESSION_STATE IoState,
    _In_ IO_SESSION_STATE IoState2,
    _In_ PVOID Buffer,
    _In_ ULONG BufferSize
    );

//[Other]
NTSTATUS
NTAPI
NtOpenSession(
  _Out_ PHANDLE SessionHandle,
  _In_ ACCESS_MASK DesiredAccess,
  _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Other]
NTSTATUS
NTAPI
NtQueryLicenseValue(
    _In_ PUNICODE_STRING Name,
    _Out_opt_ PULONG Type,
    _Out_ PVOID Buffer,
    _In_ ULONG Length,
    _Out_ PULONG ReturnedLength
    );

//[Other]
NTSTATUS
NTAPI
NtReleaseCMFViewOwnership(
    );

//[Other]
NTSTATUS
NTAPI
NtRevertContainerImpersonation(
    );

//[Other]
NTSTATUS
NTAPI
NtSetLdtEntries(
    _In_ ULONG Selector1,
    _In_ ULONG LdtEntry1L,
    _In_ ULONG LdtEntry1H,
    _In_ ULONG Selector2,
    _In_ ULONG LdtEntry2L,
    _In_ ULONG LdtEntry2H
    );

//[Other]
NTSTATUS
NTAPI
NtSetUuidSeed(
    _In_ PUCHAR UuidSeed
    );

//[Other]
NTSTATUS
NTAPI
NtShutdownSystem(
    _In_ SHUTDOWN_ACTION Action
    );

//[Other]
NTSTATUS
NTAPI
NtTerminateEnclave(
    _In_ PVOID BaseAddress,
    _In_ BOOLEAN WaitForThread
    );

//[Process]
NTSTATUS
NTAPI
NtAcquireProcessActivityReference(
    _Out_ PHANDLE pHandle,
    _In_ HANDLE hProcess,
    ULONG Unknown
    );

//[Process]
NTSTATUS
NTAPI
NtAlertMultipleThreadByThreadId(
    _In_ HANDLE ThreadHandle,
	ULONG Unknown,
	ULONG Unknown,
	ULONG Unknown
    );

//[Process]
NTSTATUS
NTAPI
NtAlertResumeThread(
    _In_ HANDLE ThreadHandle,
    _Out_ PULONG pSuspendCount
    );

//[Process]
NTSTATUS
NTAPI
NtAlertThread(
    _In_ HANDLE ThreadHandle
    );

//[Process]
NTSTATUS
NTAPI
NtAlertThreadByThreadIdEx(
    _In_ HANDLE ThreadHandle,
    ULONG Unknown	
    );

//[Process]
NTSTATUS
NTAPI
NtAlertThreadByThreadId(
    _In_ ULONG ThreadId
    );

//[Process]
NTSTATUS
NTAPI
NtApphelpCacheControl(
    _In_ ULONG ServiceClass,
    _In_ PUNICODE_STRING ServiceData
    );

//[Process]
NTSTATUS
NTAPI
NtChangeProcessState(
    _In_ HANDLE StateChangeHandle,
    _In_ HANDLE ProcessHandle,
    _In_ ULONG Action,
    _In_ PVOID ExtendedInformation,
    _In_ SIZE_T ExtendedInformationLength,
    _In_ ULONG Reserved
    );

//[Process]
NTSTATUS
NTAPI
NtChangeThreadState(
    _In_ HANDLE StateChangeHandle,
    _In_ HANDLE ThreadHandle,
    _In_ ULONG Action,
    _In_ PVOID ExtendedInformation,
    _In_ SIZE_T ExtendedInformationLength,
    _In_ ULONG Reserved
    );

//[Process]
NTSTATUS
NTAPI
NtContinue(
    _In_ PCONTEXT Context,
    _In_ BOOLEAN bTest
    );

//[Process]
NTSTATUS
NTAPI
NtContinueEx(
    _In_ PCONTEXT Context,
    _In_ BOOLEAN bTest
    );

//[Process]
NTSTATUS
NTAPI
NtCreateProcess(
    _Out_ PHANDLE ProcessHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE ParentProcessHandle,
    _In_ BOOL Inherit,
    _In_opt_ HANDLE SectionHandle,
    _In_opt_ HANDLE DebugPort,
    _In_opt_ HANDLE ExceptionPort
    );

//[Process]
NTSTATUS
NTAPI
NtCreateProcessEx(
    _Out_ PHANDLE ProcessHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE ParentProcessHandle,
    _In_ BOOL Inherit,
    _In_opt_ HANDLE SectionHandle,
    _In_opt_ HANDLE DebugPort,
    _In_opt_ HANDLE ExceptionPort,
    _In_ BOOLEAN InJob
    );

//[Process]
NTSTATUS
NTAPI
NtCreateProcessStateChange(
    _Out_ PHANDLE StateChangeHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE ProcessHandle,
    _In_ ULONG Reserved
    );

//[Process]
NTSTATUS
NTAPI
NtCreateThread(
    _Out_ PHANDLE ThreadHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE ProcessHandle,
    _Out_ PCLIENT_ID ClientId,
    _In_ PCONTEXT ThreadContext,
    _In_ PVOID UserStack,
    _In_ BOOLEAN CreateSuspended
    );

//[Process]
NTSTATUS
NTAPI
NtCreateThreadEx(
  _Out_ PHANDLE ThreadHandle,
  _In_ ACCESS_MASK DesiredAccess,
  _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
  _In_ HANDLE ProcessHandle,
  _In_ PVOID StartRoutine,
  _In_opt_ PVOID Argument,
  _In_ ULONG CreateFlags,
  _In_opt_ ULONG ZeroBits,
  _In_opt_ ULONG StackSize,
  _In_opt_ ULONG MaximumStackSize,
  _In_opt_ PVOID AttributeList
    );

//[Process]
NTSTATUS
NTAPI
NtCreateThreadStateChange(
    _Out_ PHANDLE StateChangeHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE ThreadHandle,
    _In_ ULONG Reserved
    );

//[Process]
NTSTATUS
NTAPI
NtCreateUserProcess(
  _Out_ PHANDLE ProcessHandle,
  _Out_ PHANDLE ThreadHandle,
  _In_ ACCESS_MASK ProcessDesiredAccess,
  _In_ ACCESS_MASK ThreadDesiredAccess,
  _In_opt_ POBJECT_ATTRIBUTES ProcessObjectAttributes,
  _In_opt_ POBJECT_ATTRIBUTES ThreadObjectAttributes,
  _In_ ULONG ProcessFlags,
  _In_ ULONG ThreadFlags,
  _In_opt_ PRTL_USER_PROCESS_PARAMETERS ProcessParameters,
  _Inout_ PVOID CreateInfo,
  _In_opt_ PVOID AttributeList
    );

//[Process]
NTSTATUS
NTAPI
NtCreateWorkerFactory(
  _Out_ PHANDLE WorkerFactoryHandleReturn,
  _In_ ACCESS_MASK DesiredAccess,
  _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
  _In_ HANDLE CompletionPortHandle,
  _In_ HANDLE WorkerProcessHandle,
  _In_ PVOID StartRoutine,
  _In_opt_ PVOID StartParameter,
  _In_opt_ ULONG MaxThreadCount,
  _In_opt_ ULONG StackReserve,
  _In_opt_ ULONG StackCommit
    );

//[Process]
NTSTATUS
NTAPI
NtDelayExecution(
    _In_ BOOLEAN Alertable,
    _In_ PLARGE_INTEGER DelayInterval
    );

//[Process]
NTSTATUS
NTAPI
NtGetContextThread(
    _In_ HANDLE ThreadHandle,
    _Out_ PCONTEXT pContext
    );

//[Process]
NTSTATUS
NTAPI
NtGetNextProcess(
    HANDLE ProcessHandle,
    ACCESS_MASK DesiredAccess,
    ULONG HandleAttributes,
    ULONG Flags,
    PHANDLE NewProcessHandle
    );

//[Process]
NTSTATUS
NTAPI
NtGetNextThread(
    HANDLE ProcessHandle,
    HANDLE ThreadHandle,
    ACCESS_MASK DesiredAccess,
    ULONG HandleAttributes,
    ULONG Flags,
    PHANDLE NewThreadHandle
    );

//[Process]
NTSTATUS
NTAPI
NtOpenProcess(
    _Out_ PHANDLE ProcessHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_opt_ PCLIENT_ID ClientId
    );

//[Process]
NTSTATUS
NTAPI
NtOpenThread(
    _Out_ PHANDLE ThreadHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_opt_ PCLIENT_ID ClientId
    );

//[Process]
NTSTATUS
NTAPI
NtQueryInformationProcess(
    _In_ HANDLE ProcessHandle,
    _In_ PROCESSINFOCLASS ProcessInformationClass,
    _Out_ PVOID ProcessInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Process]
NTSTATUS
NTAPI
NtQueryInformationThread(
    _In_ HANDLE ThreadHandle,
    _In_ THREADINFOCLASS ThreadInformationClass,
    _Out_ PVOID ThreadInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Process]
NTSTATUS
NTAPI
NtQueryInformationWorkerFactory(
  _In_ HANDLE WorkerFactoryHandle,
  _In_ WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,
  _Out_ PVOID Buffer,
  _In_ ULONG BufferLength,
  _Out_opt_ PULONG ReturnLength
    );

//[Process]
NTSTATUS
NTAPI
NtQueueApcThread(
    _In_ HANDLE ThreadHandle,
    _In_ PVOID ApcRoutine,
    _In_ PVOID Context,
    _In_ PVOID Argument1,
    _In_ PVOID Argument2
    );

//[Process]
NTSTATUS
NTAPI
NtQueueApcThreadEx(
    _In_ HANDLE ThreadHandle,
    _In_ HANDLE ApcReserve,
    _In_ PVOID ApcRoutine,
    _In_ PVOID Context,
    _In_ PVOID Argument1,
    _In_ PVOID Argument2
    );

//[Process]
NTSTATUS
NTAPI
NtQueueApcThreadEx2(
    _In_ HANDLE ThreadHandle,
    _In_ HANDLE ApcReserve,
    _In_ QUEUE_USER_APC_FLAGS QueueUserApcFlags,
    _In_ PPS_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID SystemArgument1,
    _In_opt_ PVOID SystemArgument2,
    _In_opt_ PVOID SystemArgument3
    );

//[Process]
NTSTATUS
NTAPI
NtRaiseException(
    _In_ PEXCEPTION_RECORD Record,
    _In_ PCONTEXT Context,
    _In_ BOOL SearchFrames
    );

//[Process]
NTSTATUS
NTAPI
NtRaiseHardError(
    _In_ NTSTATUS ErrorStatus,
    _In_ ULONG NumberOfParameters,
    _In_ ULONG ParameterMask,
    _In_ PULONG_PTR Parameters,
    _In_ HARDERROR_RESPONSE_OPTION ResponseOptions,
    _Out_ PULONG Response
    );

//[Process]
NTSTATUS
NTAPI
NtReleaseWorkerFactoryWorker(
    _In_ HANDLE WorkerFactoryHandle
    );

//[Process]
NTSTATUS
NTAPI
NtResumeProcess(
    _In_ HANDLE hProcess
    );

//[Process]
NTSTATUS
NTAPI
NtResumeThread(
    _In_ HANDLE ThreadHandle,
    _Out_ PULONG SuspendCount
    );

//[Process]
NTSTATUS
NTAPI
NtSetContextThread(
    _In_ HANDLE ThreadHandle,
    _In_ PCONTEXT pContext
    );

//[Process]
NTSTATUS
NTAPI
NtSetDefaultHardErrorPort(
    _In_ HANDLE Port
    );

//[Process]
NTSTATUS
NTAPI
NtSetInformationProcess(
    _In_ HANDLE ProcessHandle,
    _In_ PROCESSINFOCLASS ProcessInformationClass,
    _In_ PVOID ProcessInformation,
    _In_ ULONG Length
    );

//[Process]
NTSTATUS
NTAPI
NtSetInformationThread(
    _In_ HANDLE ThreadHandle,
    _In_ THREADINFOCLASS ThreadInformationClass,
    _In_ PVOID ThreadInformation,
    _In_ ULONG Length
    );

//[Process]
NTSTATUS
NTAPI
NtSetInformationWorkerFactory(
  _In_ HANDLE WorkerFactoryHandle,
  _In_ WORKERFACTORYINFOCLASS InformationClass,
  _In_ PVOID Buffer,
  _In_ ULONG BufferLength
    );

//[Process]
NTSTATUS
NTAPI
NtShutdownWorkerFactory(
  _In_ HANDLE WorkerFactoryHandle,
  _Inout_ PULONG PendingWorkerCount
    );

//[Process]
NTSTATUS
NTAPI
NtSuspendProcess(
    _In_ HANDLE ProcessHandle
    );

//[Process]
NTSTATUS
NTAPI
NtSuspendThread(
    _In_ HANDLE ThreadHandle,
    _Out_opt_ PULONG PreviousSuspendCount
    );

//[Process]
NTSTATUS
NTAPI
NtTerminateProcess(
    _In_ HANDLE ProcessHandle,
    _In_ NTSTATUS ExitStatus
    );

//[Process]
NTSTATUS
NTAPI
NtTerminateThread(
    _In_ HANDLE ThreadHandle,
    _In_ NTSTATUS ExitStatus
    );

//[Process]
NTSTATUS
NTAPI
NtTestAlert(
    );

//[Process]
NTSTATUS
NTAPI
NtUmsThreadYield(
    _In_  PVOID SchedulerParam
    );

//[Process]
NTSTATUS
NTAPI
NtWaitForAlertByThreadId(
    _In_ HANDLE Handle,
    _In_opt_ PLARGE_INTEGER Timeout
    );

//[Process]
NTSTATUS
NTAPI
NtWaitForWorkViaWorkerFactory(
   _In_ HANDLE WorkerFactoryHandle,
   _Out_ PVOID MiniPacket
    );

//[Process]
NTSTATUS
NTAPI
NtWorkerFactoryWorkerReady(
    _In_ HANDLE WorkerFactoryHandle
    );

//[Process]
NTSTATUS
NTAPI
NtYieldExecution(
    );

//[Registry]
NTSTATUS
NTAPI
NtCommitRegistryTransaction(
    HANDLE RegistryHandle,
    BOOL Wait
    );

//[Registry]
NTSTATUS
NTAPI
NtCompactKeys(
    _In_ ULONG NumberOfKeys,
    _In_ PVOID KeyHandles
    );

//[Registry]
NTSTATUS
NTAPI
NtCompressKey(
    _In_ HANDLE KeyHandle
    );

//[Registry]
NTSTATUS
NTAPI
NtCreateKey(
    _Out_ PHANDLE KeyHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG TitleIndex,
    _In_opt_ PUNICODE_STRING Class,
    _In_ ULONG CreateOptions,
    _Out_opt_ PULONG Disposition
    );

//[Registry]
NTSTATUS
NTAPI
NtCreateKeyTransacted(
  _Out_       PHANDLE KeyHandle,
  _In_        ACCESS_MASK DesiredAccess,
  _In_        POBJECT_ATTRIBUTES ObjectAttributes,
  _Reserved_  ULONG TitleIndex,
  _In_opt_    PUNICODE_STRING Class,
  _In_        ULONG CreateOptions,
  _In_        HANDLE TransactionHandle,
  _Out_opt_   PULONG Disposition
    );

//[Registry]
NTSTATUS
NTAPI
NtCreateRegistryTransaction(
    _Out_ PHANDLE RegistryHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG Flags
    );

//[Registry]
NTSTATUS
NTAPI
NtDeleteKey(
    _In_ HANDLE KeyHandle
    );

//[Registry]
NTSTATUS
NTAPI
NtDeleteValueKey(
    _In_ HANDLE KeyHandle,
    _In_ PUNICODE_STRING ValueName
    );

//[Registry]
NTSTATUS
NTAPI
NtEnumerateKey(
    _In_ HANDLE KeyHandle,
    _In_ ULONG Index,
    _In_ KEY_INFORMATION_CLASS KeyInformationClass,
    _Out_ PVOID KeyInformation,
    _In_ ULONG Length,
    _Out_ PULONG ResultLength
    );

//[Registry]
NTSTATUS
NTAPI
NtEnumerateValueKey(
    _In_ HANDLE KeyHandle,
    _In_ ULONG Index,
    _In_ KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
    _Out_ PVOID KeyValueInformation,
    _In_ ULONG Length,
    _Out_ PULONG ResultLength
    );

//[Registry]
NTSTATUS
NTAPI
NtFlushKey(
    _In_ HANDLE KeyHandle
    );

//[Registry]
NTSTATUS
NTAPI
NtFreezeRegistry(
  _In_ ULONG TimeOutInSeconds
    );

//[Registry]
NTSTATUS
NTAPI
NtInitializeRegistry(
    _In_ ULONG Options
    );

//[Registry]
NTSTATUS
NTAPI
NtLoadKey(
    _In_ POBJECT_ATTRIBUTES KeyObjectAttributes,
    _In_ POBJECT_ATTRIBUTES FileObjectAttributes
    );

//[Registry]
NTSTATUS
NTAPI
NtLoadKey2(
    _In_ POBJECT_ATTRIBUTES KeyObjectAttributes,
    _In_ POBJECT_ATTRIBUTES FileObjectAttributes,
    _In_ ULONG Flags
    );

//[Registry]
NTSTATUS
NTAPI
NtLoadKey3(
    _In_ POBJECT_ATTRIBUTES KeyObjectAttributes,
    _In_ POBJECT_ATTRIBUTES FileObjectAttributes,
    _In_ ULONG Flags,
    _In_ PVOID LoadArguments, 
    _In_ ULONG LoadArgumentCount, 
    _In_ ACCESS_MASK DesiredAccess, 
    _In_ HANDLE KeyHandle, 
    _In_ ULONG Unkown
    );

//[Registry]
NTSTATUS
NTAPI
NtLoadKeyEx(
  _In_ POBJECT_ATTRIBUTES TargetKey,
  _In_ POBJECT_ATTRIBUTES SourceFile,
  _In_ ULONG Flags,
  _In_opt_ HANDLE TrustClassKey,
  _In_ PVOID Reserved,
  _In_ PVOID ObjectContext,
  _In_ PVOID CallbackReserved,
  _Out_ PIO_STATUS_BLOCK IoStatusBlock
    );

//[Registry]
NTSTATUS
NTAPI
NtLockRegistryKey(
    _In_ HANDLE KeyHandle
    );

//[Registry]
NTSTATUS
NTAPI
NtNotifyChangeKey(
    _In_ HANDLE KeyHandle,
    _In_ HANDLE Event,
    _In_opt_ PIO_APC_ROUTINE ApcRoutine,
    _In_opt_ PVOID ApcContext,
    _Out_ PIO_STATUS_BLOCK IoStatusBlock,
    _In_ ULONG CompletionFilter,
    _In_ BOOLEAN WatchTree,
    _Out_ PVOID Buffer,
    _In_ ULONG BufferSize,
    _In_ BOOLEAN Asynchronous
    );

//[Registry]
NTSTATUS
NTAPI
NtNotifyChangeMultipleKeys(
  _In_       HANDLE MasterKeyHandle,
  _In_opt_   ULONG Count,
  _In_opt_   POBJECT_ATTRIBUTES SubordinateObjects,
  _In_opt_   HANDLE Event,
  _In_opt_   PIO_APC_ROUTINE ApcRoutine,
  _In_opt_   PVOID ApcContext,
  _Out_      PIO_STATUS_BLOCK IoStatusBlock,
  _In_       ULONG CompletionFilter,
  _In_       BOOLEAN WatchTree,
  _Out_opt_  PVOID Buffer,
  _In_       ULONG BufferSize,
  _In_       BOOLEAN Asynchronous
    );

//[Registry]
NTSTATUS
NTAPI
NtOpenKey(
    _Out_ PHANDLE KeyHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Registry]
NTSTATUS
NTAPI
NtOpenKeyEx(
  _Out_  PHANDLE KeyHandle,
  _In_   ACCESS_MASK DesiredAccess,
  _In_   POBJECT_ATTRIBUTES ObjectAttributes,
  _In_   ULONG OpenOptions
    );

//[Registry]
NTSTATUS
NTAPI
NtOpenKeyTransacted(
  _Out_  PHANDLE KeyHandle,
  _In_   ACCESS_MASK DesiredAccess,
  _In_   POBJECT_ATTRIBUTES ObjectAttributes,
  _In_   HANDLE TransactionHandle
    );

//[Registry]
NTSTATUS
NTAPI
NtOpenKeyTransactedEx(
  _Out_  PHANDLE KeyHandle,
  _In_   ACCESS_MASK DesiredAccess,
  _In_   POBJECT_ATTRIBUTES ObjectAttributes,
  _In_   ULONG OpenOptions,
  _In_   HANDLE TransactionHandle
    );

//[Registry]
NTSTATUS
NTAPI
NtOpenRegistryTransaction(
    _Out_ PHANDLE RegistryHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Registry]
NTSTATUS
NTAPI
NtQueryKey(
    _In_ HANDLE KeyHandle,
    _In_ KEY_INFORMATION_CLASS KeyInformationClass,
    _Out_ PVOID KeyInformation,
    _In_ ULONG Length,
    _Out_ PULONG ResultLength
    );

//[Registry]
NTSTATUS
NTAPI
NtQueryMultipleValueKey(
    _In_ HANDLE KeyHandle,
    _In_ PVOID ListOfValuesToQuery,
    _In_ ULONG NumberOfItems,
    _Out_ PVOID ValueInformation,
    _Inout_ PULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Registry]
NTSTATUS
NTAPI
NtQueryOpenSubKeys(
    _In_ POBJECT_ATTRIBUTES TargetKey,
    _Out_ PULONG HandleCount
    );

//[Registry]
NTSTATUS
NTAPI
NtQueryOpenSubKeysEx(
    _In_ POBJECT_ATTRIBUTES TargetKey,
    _In_ ULONG BufferLength,
    _Out_ PVOID Buffer,
    _Out_ PULONG ResultLength
    );

//[Registry]
NTSTATUS
NTAPI
NtQueryValueKey(
    _In_ HANDLE KeyHandle,
    _In_ PUNICODE_STRING ValueName,
    _In_ KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
    _Out_ PVOID KeyValueInformation,
    _In_ ULONG Length,
    _Out_ PULONG ResultLength
    );

//[Registry]
NTSTATUS
NTAPI
NtRenameKey(
    _In_ HANDLE KeyHandle,
    _In_ PUNICODE_STRING ReplacementName
    );

//[Registry]
NTSTATUS
NTAPI
NtReplaceKey(
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE Key,
    _In_ POBJECT_ATTRIBUTES ReplacedObjectAttributes
    );

//[Registry]
NTSTATUS
NTAPI
NtRestoreKey(
    _In_ HANDLE KeyHandle,
    _In_ HANDLE FileHandle,
    _In_ ULONG RestoreFlags
    );

//[Registry]
NTSTATUS
NTAPI
NtRollbackRegistryTransaction(
    HANDLE RegistryHandle,
    BOOL Wait
    );

//[Registry]
NTSTATUS
NTAPI
NtSaveKey(
    _In_ HANDLE KeyHandle,
    _In_ HANDLE FileHandle
    );

//[Registry]
NTSTATUS
NTAPI
NtSaveKeyEx(
    _In_ HANDLE KeyHandle,
    _In_ HANDLE FileHandle,
    _In_ ULONG Flags
    );

//[Registry]
NTSTATUS
NTAPI
NtSaveMergedKeys(
    _In_ HANDLE HighPrecedenceKeyHandle,
    _In_ HANDLE LowPrecedenceKeyHandle,
    _In_ HANDLE FileHandle
    );

//[Registry]
NTSTATUS
NTAPI
NtSetInformationKey(
    _In_ HANDLE KeyHandle,
    _In_ KEY_SET_INFORMATION_CLASS KeySetInformationClass,
    _In_ PVOID KeyInformation,
    _In_ ULONG Length
    );

//[Registry]
NTSTATUS
NTAPI
NtSetValueKey(
    _In_ HANDLE KeyHandle,
    _In_ PUNICODE_STRING ValueName,
    _In_opt_ ULONG TitleIndex,
    _In_ ULONG Type,
    _In_ PVOID Data,
    _In_ ULONG DataSize
    );

//[Registry]
NTSTATUS
NTAPI
NtThawRegistry(
    );

//[Registry]
NTSTATUS
NTAPI
NtUnloadKey(
    _In_ POBJECT_ATTRIBUTES TargetKey
    );

//[Registry]
NTSTATUS
NTAPI
NtUnloadKey2(
    _In_ POBJECT_ATTRIBUTES TargetKey,
    _In_ ULONG Flags
    );

//[Registry]
NTSTATUS
NTAPI
NtUnloadKeyEx(
    _In_ POBJECT_ATTRIBUTES TargetKey,
    _In_ HANDLE Event
    );

//[Security]
NTSTATUS
NTAPI
NtAccessCheck(
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
    _In_ HANDLE ClientToken,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ PGENERIC_MAPPING GenericMapping,
    _Out_ PPRIVILEGE_SET PrivilegeSet,
    _Out_ PULONG ReturnLength,
    _Out_ PACCESS_MASK GrantedAccess,
    _Out_ PNTSTATUS AccessStatus
    );

//[Security]
NTSTATUS
NTAPI
NtAccessCheckAndAuditAlarm(
    _In_opt_ PUNICODE_STRING SubsystemName,
    _In_opt_ HANDLE ObjectHandle,
    _In_opt_ PUNICODE_STRING ObjectTypeName,
    _In_opt_ PUNICODE_STRING ObjectName,
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ PGENERIC_MAPPING GenericMapping,
    _In_ BOOLEAN ObjectCreation,
    _Out_ PACCESS_MASK GrantedAccess,
    _Out_ PNTSTATUS AccessStatus,
    _Out_ PBOOLEAN GenerateOnClose
    );

//[Security]
NTSTATUS
NTAPI
NtAccessCheckByType(
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
    _In_ PSID PrincipalSelfSid,
    _In_ HANDLE ClientToken,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_TYPE_LIST ObjectTypeList,
    _In_ ULONG ObjectTypeListLength,
    _In_ PGENERIC_MAPPING GenericMapping,
    _Out_ PPRIVILEGE_SET PrivilegeSet,
    _Out_ PULONG ReturnedLength,
    _Out_ PACCESS_MASK GrantedAccess,
    _Out_ PNTSTATUS AccessStatus
    );

//[Security]
NTSTATUS
NTAPI
NtAccessCheckByTypeAndAuditAlarm(
    _In_ PUNICODE_STRING SubsystemName,
    _In_ PVOID HandleId,
    _In_ PUNICODE_STRING ObjectTypeName,
    _In_ PUNICODE_STRING ObjectName,
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
    _In_ PSID PrincipalSelfSid,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ ULONG AuditType,
    _In_ ULONG Flags,
    _In_ POBJECT_TYPE_LIST ObjectTypeList,
    _In_ ULONG ObjectTypeListLength,
    _In_ PGENERIC_MAPPING GenericMapping,
    _In_ BOOLEAN ObjectCreation,
    _Out_ PACCESS_MASK GrantedAccess,
    _Out_ PULONG AccessStatus,
    _Out_ PBOOLEAN GenerateOnClose
    );

//[Security]
NTSTATUS
NTAPI
NtAccessCheckByTypeResultList(
  _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
  _In_ PSID PrincipalSelfSid,
  _In_ HANDLE TokenHandle,
  _In_ ACCESS_MASK DesiredAccess,
  _In_ POBJECT_TYPE_LIST ObjectTypeList,
  _In_ ULONG ObjectTypeListLength,
  _In_ PGENERIC_MAPPING GenericMapping,
  _In_ PPRIVILEGE_SET PrivilegeSet,
  _In_ ULONG PrivilegeSetLength,
  _Out_ PACCESS_MASK GrantedAccessList,
  _Out_ PNTSTATUS AccessStatusList
    );

//[Security]
NTSTATUS
NTAPI
NtAccessCheckByTypeResultListAndAuditAlarm(
  _In_ PUNICODE_STRING SubsystemName,
  _In_ PVOID HandleId,
  _In_ PUNICODE_STRING ObjectTypeName,
  _In_ PUNICODE_STRING ObjectName,
  _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
  _In_ PSID PrincipalSelfSid,
  _In_ ACCESS_MASK DesiredAccess,
  _In_ ULONG AuditType,
  _In_ ULONG Flags,
  _In_ POBJECT_TYPE_LIST ObjectTypeList,
  _In_ ULONG ObjectTypeListLength,
  _In_ PVOID GenericMapping,
  _In_ BOOLEAN ObjectCreation,
  _Out_ PACCESS_MASK GrantedAccessList,
  _Out_ PNTSTATUS AccessStatusList,
  _Out_ PULONG GenerateOnClose
    );

//[Security]
NTSTATUS
NTAPI
NtAccessCheckByTypeResultListAndAuditAlarmByHandle(
  _In_ PUNICODE_STRING SubsystemName,
  _In_ PVOID HandleId,
  _In_ HANDLE TokenHandle,
  _In_ PUNICODE_STRING ObjectTypeName,
  _In_ PUNICODE_STRING ObjectName,
  _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
  _In_ PSID PrincipalSelfSid,
  _In_ ACCESS_MASK DesiredAccess,
  _In_ AUDIT_EVENT_TYPE AuditType,
  _In_ ULONG Flags,
  _In_ POBJECT_TYPE_LIST ObjectTypeList,
  _In_ ULONG ObjectTypeListLength,
  _In_ PGENERIC_MAPPING GenericMapping,
  _In_ BOOLEAN ObjectCreation,
  _Out_ PACCESS_MASK GrantedAccessList,
  _Out_ PNTSTATUS AccessStatusList,
  _Out_ PULONG GenerateOnClose
    );

//[Security]
NTSTATUS
NTAPI
NtAdjustGroupsToken(
    _In_ HANDLE TokenHandle,
    _In_ BOOLEAN ResetToDefault,
    _In_ PTOKEN_GROUPS NewTokenGroups,
    _In_ ULONG TokenGroupsLength,
    _Out_ PTOKEN_GROUPS PrevTokenGroups,
    _Out_opt_ PULONG ReturnedLength
    );

//[Security]
NTSTATUS
NTAPI
NtAdjustPrivilegesToken(
    _In_ HANDLE TokenHandle,
    _In_ BOOLEAN DisableAllPrivileges,
    _In_ PTOKEN_PRIVILEGES NewState,
    _In_ ULONG BufferLength,
    _Out_opt_ PTOKEN_PRIVILEGES PreviousState,
    _Out_ PULONG ReturnLength
    );

//[Security]
NTSTATUS
NTAPI
NtAdjustTokenClaimsAndDeviceGroups(
    _In_ HANDLE TokenHandle,
    _In_ BOOLEAN UserResetToDefault,
    _In_ BOOLEAN DeviceResetToDefault,
    _In_ BOOLEAN DeviceGroupsResetToDefault,
    _In_opt_ PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState,
    _In_opt_ PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState,
    _In_opt_ PTOKEN_GROUPS NewDeviceGroupsState,
    _In_ ULONG UserBufferLength,
    _Out_ PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState,
    _In_ ULONG DeviceBufferLength,
    _Out_ PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState,
    _In_ ULONG DeviceGroupsBufferLength,
    _Out_ PTOKEN_GROUPS PreviousDeviceGroups,
    _Out_opt_ PULONG UserReturnLength,
    _Out_opt_ PULONG DeviceReturnLength,
    _Out_opt_ PULONG DeviceGroupsReturnBufferLength
    );

//[Security]
NTSTATUS
NTAPI
NtCloseObjectAuditAlarm(
    _In_ PUNICODE_STRING SubsystemName,
    _In_opt_ HANDLE ObjectHandle,
    _In_ BOOLEAN OnClose
    );

//[Security]
NTSTATUS
NTAPI
NtCompareSigningLevels(
    BYTE SigningLevel,
    BYTE RequiredLevel
    );

//[Security]
NTSTATUS
NTAPI
NtCompareTokens(
  _In_ HANDLE FirstTokenHandle,
  _In_ HANDLE SecondTokenHandle,
  _Out_ PBOOLEAN Equal
    );

//[Security]
NTSTATUS
NTAPI
NtCreateLowBoxToken(
    _Out_ PHANDLE LowBoxToken,
    _In_ HANDLE hOrgToken,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ PSID AppContainerSid,
    _In_ DWORD CapabilityCount,
    _In_ PSID_AND_ATTRIBUTES Capabilities,
    _In_ DWORD LowBoxCount,
    _In_ PVOID LowBoxStruct
    );

//[Security]
NTSTATUS
NTAPI
NtCreateToken(
    _Out_ PHANDLE TokenHandle,
    _In_ ACCESS_MASK          DesiredAccess,
    _In_ POBJECT_ATTRIBUTES   ObjectAttributes,
    _In_ TOKEN_TYPE           TokenType,
    _In_ PLUID                AuthenticationId,
    _In_ PLARGE_INTEGER       ExpirationTime,
    _In_ PTOKEN_USER          TokenUser,
    _In_ PTOKEN_GROUPS        TokenGroups,
    _In_ PTOKEN_PRIVILEGES    TokenPrivileges,
    _In_ PTOKEN_OWNER         TokenOwner,
    _In_ PTOKEN_PRIMARY_GROUP TokenPrimaryGroup,
    _In_ PTOKEN_DEFAULT_DACL  TokenDefaultDacl,
    _In_ PTOKEN_SOURCE        TokenSource
    );

//[Security]
NTSTATUS
NTAPI
NtCreateTokenEx(
    _Out_ PHANDLE TokenHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ TOKEN_TYPE TokenType,
    _In_ PLUID AuthenticationId,
    _In_ PLARGE_INTEGER ExpirationTime,
    _In_ PTOKEN_USER User,
    _In_ PTOKEN_GROUPS Groups,
    _In_ PTOKEN_PRIVILEGES Privileges,
    _In_opt_ PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes,
    _In_opt_ PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes,
    _In_opt_ PTOKEN_GROUPS DeviceGroups,
    _In_opt_ PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy,
    _In_opt_ PTOKEN_OWNER Owner,
    _In_ PTOKEN_PRIMARY_GROUP PrimaryGroup,
    _In_opt_ PTOKEN_DEFAULT_DACL DefaultDacl,
    _In_ PTOKEN_SOURCE TokenSource
    );

//[Security]
NTSTATUS
NTAPI
NtDeleteObjectAuditAlarm(
    _In_ PUNICODE_STRING SubsystemName,
    _In_opt_ HANDLE ObjectHandle,
    _In_ BOOLEAN OnClose
    );

//[Security]
NTSTATUS
NTAPI
NtDuplicateToken(
    _In_ HANDLE ExistingTokenHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ BOOLEAN EffectiveOnly,
    _In_ TOKEN_TYPE TokenType,
    _Out_ PHANDLE NewTokenHandle
    );

//[Security]
NTSTATUS
NTAPI
NtFilterBootOption(
    _In_ ULONG FilterOperation,
    _In_ ULONG ObjectType,
    _In_ ULONG ElementType,
    _In_ PVOID Data,
    _In_ ULONG DataSize
    );

//[Security]
NTSTATUS
NTAPI
NtFilterToken(
    _In_ HANDLE ExistingTokenHandle,
    _In_ ULONG Flags,
    _In_opt_ PTOKEN_GROUPS SidsToDisable,
    _In_opt_ PTOKEN_PRIVILEGES PrivilegesToDelete,
    _In_opt_ PTOKEN_GROUPS RestrictedSids,
    _Out_ PHANDLE NewTokenHandle
    );

//[Security]
NTSTATUS
NTAPI
NtFilterTokenEx(
    _In_ HANDLE TokenHandle,
    _In_ ULONG  Flags,
    _In_opt_ PTOKEN_GROUPS  SidsToDisable,
    _In_opt_ PTOKEN_PRIVILEGES  PrivilegesToDelete,
    _In_opt_ PTOKEN_GROUPS  RestrictedSids,
    _In_ ULONG  DisableUserClaimsCount,
    _In_opt_ PUNICODE_STRING  UserClaimsToDisable,
    _In_ ULONG  DisableDeviceClaimsCount,
    _In_opt_ PUNICODE_STRING  DeviceClaimsToDisable,
    _In_opt_ PTOKEN_GROUPS  DeviceGroupsToDisable,
    _In_opt_ PTOKEN_SECURITY_ATTRIBUTES_INFORMATION  RestrictedUserAttributes,
    _In_opt_ PTOKEN_SECURITY_ATTRIBUTES_INFORMATION  RestrictedDeviceAttributes,
    _In_opt_ PTOKEN_GROUPS  RestrictedDeviceGroups,
    _Out_ PHANDLE  NewTokenHandle 
    );

//[Security]
NTSTATUS
NTAPI
NtGetCachedSigningLevel(
    _In_ HANDLE File,
    _Out_ PULONG Flags,
    _Out_ PBYTE SigningLevel,
    _Out_ PUCHAR Thumbprint,
    _Inout_opt_ PULONG ThumbprintSize,
    _Out_opt_ PULONG ThumbprintAlgorithm
    );

//[Security]
NTSTATUS
NTAPI
NtImpersonateAnonymousToken(
    _In_ HANDLE THreadHandle
    );

//[Security]
NTSTATUS
NTAPI
NtImpersonateThread(
    _In_ HANDLE ThreadHandle,
    _In_ HANDLE ThreadToImpersonate,
    _In_ PULONG SecurityQualityOfService
    );

//[Security]
NTSTATUS
NTAPI
NtOpenProcessToken(
    _In_ HANDLE ProcessHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _Out_ PHANDLE TokenHandle
    );

//[Security]
NTSTATUS
NTAPI
NtOpenProcessTokenEx(
    _In_ HANDLE ProcessHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ ULONG HandleAttributes,
    _Out_ PHANDLE TokenHandle
    );

//[Security]
NTSTATUS
NTAPI
NtOpenThreadToken(
    _In_ HANDLE ThreadHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ BOOL OpenAsSelf,
    _Out_ PHANDLE TokenHandle
    );

//[Security]
NTSTATUS
NTAPI
NtOpenThreadTokenEx(
    _In_ HANDLE ThreadHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ BOOL OpenAsSelf,
    _In_ ULONG HandleAttributes,
    _Out_ PHANDLE TokenHandle
    );

//[Security]
NTSTATUS
NTAPI
NtPrivilegeCheck(
    _In_ HANDLE TokenHandle,
    _In_ PPRIVILEGE_SET PrivilegeSet,
    _Out_ PBOOLEAN HasPrivilege
    );

//[Security]
NTSTATUS
NTAPI
NtPrivilegeObjectAuditAlarm(
    _In_ PUNICODE_STRING SubsystemName,
    _In_ PVOID HandleId,
    _In_ HANDLE TokenHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ PPRIVILEGE_SET PrivilegeSet,
    _In_ BOOLEAN AccessGranted
    );

//[Security]
NTSTATUS
NTAPI
NtPrivilegedServiceAuditAlarm(
    _In_ PUNICODE_STRING SubsystemName,
    _In_ PUNICODE_STRING ServiceName,
    _In_ HANDLE TokenHandle,
    _In_ PPRIVILEGE_SET PrivilegeSet,
    _In_ BOOLEAN AccessGranted
    );

//[Security]
NTSTATUS
NTAPI
NtQueryInformationToken(
    _In_ HANDLE TokenHandle,
    _In_ TOKEN_INFORMATION_CLASS TokenInformationClass,
    _Out_ PVOID TokenInformation,
    _In_ ULONG Length,
    _Out_ PULONG ReturnLength
    );

//[Security]
NTSTATUS
NTAPI
NtQuerySecurityAttributesToken(
  _In_ HANDLE TokenHandle,
  _In_ PUNICODE_STRING Attributes,
  _In_ ULONG NumberOfAttributes,
  _Out_ PVOID Buffer,
  _In_ ULONG Length,
  _Out_ PULONG ReturnLength
    );

//[Security]
NTSTATUS
NTAPI
NtQuerySecurityObject(
    _In_ HANDLE Handle,
    _In_ SECURITY_INFORMATION SecurityInformation,
    _Out_ PSECURITY_DESCRIPTOR SecurityDescriptor,
    _In_ ULONG SecurityDescriptorLength,
    _Out_ PULONG ReturnLength
    );

//[Security]
NTSTATUS
NTAPI
NtQuerySecurityPolicy(
    _In_ PUNICODE_STRING Category,
    _In_ PUNICODE_STRING SubCategory,
    _In_ PUNICODE_STRING Policy,
    _Inout_ PULONG Unknown,
    _Out_ PBOOLEAN Enabled,
    _In_ PULONG Subsystem
    );

//[Security]
NTSTATUS
NTAPI
NtSetCachedSigningLevel(
    _In_ ULONG Flags,
    _In_ BYTE InputSigningLevel,
    _In_ PHANDLE SourceFiles,
    _In_ ULONG SourceFileCount,
    _In_opt_ HANDLE TargetFile 
    );

//[Security]
NTSTATUS
NTAPI
NtSetCachedSigningLevel2(
    _In_ ULONG Flags,
    _In_ BYTE InputSigningLevel,
    _In_ PHANDLE SourceFiles,
    _In_ ULONG SourceFileCount,
    _In_opt_ HANDLE TargetFile,
    _In_opt_ PVOID LevelInformation
    );

//[Security]
NTSTATUS
NTAPI
NtSetInformationToken(
    _In_ HANDLE TokenHandle,
    _In_ TOKEN_INFORMATION_CLASS Class,
    _In_ PVOID Buffer,
    _In_ ULONG BufferLength
    );

//[Security]
NTSTATUS
NTAPI
NtSetSecurityObject(
    _In_ HANDLE Handle,
    _In_ SECURITY_INFORMATION SecurityInformation,
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor
    );

//[Synchronization]
NTSTATUS
NTAPI
NtAcquireCrossVmMutant(
    _In_ HANDLE EventHandle,
    _In_ PULONGLONG Unknown
    );

//[Synchronization]
NTSTATUS
NTAPI
NtClearEvent(
    _In_ HANDLE EventHandle
    );

//[Synchronization]
NTSTATUS
NTAPI
NtCreateCrossVmEvent(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    ULONG Unknown,
    PVOID Unknown,
    _In_ PGUID Guid
    );

//[Synchronization]
NTSTATUS
NTAPI
NtCreateCrossVmMutant(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    ULONG Unknown,
    PVOID Unknown,
    _In_ PGUID Guid
    );

//[Synchronization]
NTSTATUS
NTAPI
NtCreateEvent(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ EVENT_TYPE EventType,
    _In_ BOOLEAN InitialState
    );

//[Synchronization]
NTSTATUS
NTAPI
NtCreateEventPair(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Synchronization]
NTSTATUS
NTAPI
NtCreateKeyedEvent(
    _Out_ PHANDLE KeyedEventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG Reserved
    );

//[Synchronization]
NTSTATUS
NTAPI
NtCreateMutant(
    _Out_ PHANDLE MutantHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ BOOLEAN InitialOwner
    );

//[Synchronization]
NTSTATUS
NTAPI
NtCreateSemaphore(
    _Out_ PHANDLE SemaphoreHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ LONG InitialCount,
    _In_ LONG MaxCount
    );

//[Synchronization]
NTSTATUS
NTAPI
NtOpenEvent(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Synchronization]
NTSTATUS
NTAPI
NtOpenEventPair(
    _Out_ PHANDLE EventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Synchronization]
NTSTATUS
NTAPI
NtOpenKeyedEvent(
    _Out_ PHANDLE KeyedEventHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Synchronization]
NTSTATUS
NTAPI
NtOpenMutant(
    _Out_ PHANDLE MutantHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Synchronization]
NTSTATUS
NTAPI
NtOpenSemaphore(
    _Out_ PHANDLE SemaphoreHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Synchronization]
NTSTATUS
NTAPI
NtPulseEvent(
    _In_ HANDLE EventHandle,
    _Out_opt_ PULONG PrevState
    );

//[Synchronization]
NTSTATUS
NTAPI
NtQueryEvent(
    _In_ HANDLE EventHandle,
    _In_ EVENT_INFORMATION_CLASS EventInformationClass,
    _Out_ PVOID EventInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Synchronization]
NTSTATUS
NTAPI
NtQueryMutant(
    _In_ HANDLE MutantHandle,
    _In_ MUTANT_INFORMATION_CLASS MutantInformationClass,
    _Out_ PVOID MutantInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Synchronization]
NTSTATUS
NTAPI
NtQuerySemaphore(
    _In_ HANDLE SemaphoreHandle,
    _In_ SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass,
    _Out_ PVOID SemaphoreInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Synchronization]
NTSTATUS
NTAPI
NtReleaseKeyedEvent(
    _In_ HANDLE KeyedEventHandle,
    _In_ PVOID Key,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
    );

//[Synchronization]
NTSTATUS
NTAPI
NtReleaseMutant(
    _In_ HANDLE MutantHandle,
    _Out_opt_ PULONG PreviousCount
    );

//[Synchronization]
NTSTATUS
NTAPI
NtReleaseSemaphore(
    _In_ HANDLE SemaphoreHandle,
    _In_ ULONG Count,
    _Out_opt_ PULONG PreviousCount
    );

//[Synchronization]
NTSTATUS
NTAPI
NtResetEvent(
    _In_ HANDLE EventHandle,
    _Out_opt_ PULONG PrevState
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetEvent(
    _In_ HANDLE EventHandle,
    _Out_opt_ PULONG PrevState
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetEventEx(
    _In_ HANDLE EventHandle,
	ULONG Unknown,
	ULONG Unknown
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetEventBoostPriority(
    _In_ HANDLE EventHandle
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetHighEventPair(
    _In_ HANDLE EventHandle
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetHighWaitLowEventPair(
    _In_ HANDLE EventHandle
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetHighWaitLowThread(
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetLowEventPair(
    _In_ HANDLE EventHandle
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetLowWaitHighEventPair(
    _In_ HANDLE EventHandle
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSetLowWaitHighThread(
    );

//[Synchronization]
NTSTATUS
NTAPI
NtSignalAndWaitForSingleObject(
    _In_ HANDLE SignalHandle,
    _In_ HANDLE ObjectHandle,
    _In_ BOOLEAN Alertable,
    _In_ PLARGE_INTEGER Timeout
    );

//[Synchronization]
NTSTATUS
NTAPI
NtTraceEvent(
  _In_ HANDLE TraceHandle,
  _In_ ULONG Flags,
  _In_ ULONG FieldSize,
  _In_ PVOID Fields
    );

//[Synchronization]
NTSTATUS
NTAPI
NtWaitForKeyedEvent(
    _In_ HANDLE               KeyedEventHandle,
    _In_ PVOID                Key,
    _In_ BOOLEAN              Alertable,
    _In_opt_ PLARGE_INTEGER       Timeout
    );

//[Synchronization]
NTSTATUS
NTAPI
NtWaitForMultipleObjects(
    _In_ ULONG Count,
    _In_ PHANDLE Handles,
    _In_ WAIT_TYPE WaitType,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
    );

//[Synchronization]
NTSTATUS
NTAPI
NtWaitForMultipleObjects32(
    _In_ ULONG ObjectCount,
    _In_ PHANDLE Handles,
    _In_ WAIT_TYPE WaitType,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
    );

//[Synchronization]
NTSTATUS
NTAPI
NtWaitForSingleObject(
    _In_ HANDLE Handle,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
    );

//[Synchronization]
NTSTATUS
NTAPI
NtWaitHighEventPair(
    _In_ HANDLE EventHandle
    );

//[Synchronization]
NTSTATUS
NTAPI
NtWaitLowEventPair(
    _In_ HANDLE EventHandle
    );

//[Time]
NTSTATUS
NTAPI
NtCancelTimer(
    _In_ HANDLE TimerHandle,
    _Out_opt_ PBOOLEAN CurrentState
    );

//[Time]
NTSTATUS
NTAPI
NtCancelTimer2(
    _In_ HANDLE TimerHandle,
    _Out_opt_ PBOOLEAN State
    );

//[Time]
NTSTATUS
NTAPI
NtConvertBetweenAuxiliaryCounterAndPerformanceCounter(
    BOOL InputIsAuxiliary,
    PULONGLONG lpInputCounterValue,
    PULONGLONG lpOutputCounterValue,
    PULONGLONG lpConversionError
    );

//[Time]
NTSTATUS
NTAPI
NtCreateIRTimer(
    _Out_ PHANDLE TimerHandle,
    _In_ ACCESS_MASK DesiredAccess
    );

//[Time]
NTSTATUS
NTAPI
NtCreateTimer(
    _Out_ PHANDLE TimerHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ TIMER_TYPE TimerType
    );

//[Time]
NTSTATUS
NTAPI
NtCreateTimer2(
    _Out_ PHANDLE TimerHandle,
    _In_opt_ PVOID Unknown1,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ ULONG Attributes,
    _In_ ACCESS_MASK DesiredAccess
    );

//[Time]
NTSTATUS
NTAPI
NtOpenTimer(
    _Out_ PHANDLE TimerHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Time]
NTSTATUS
NTAPI
NtQueryAuxiliaryCounterFrequency(
    _Out_ PULONGLONG lpAuxiliaryCounterFrequency
    );

//[-Time]
NTSTATUS
NTAPI
NtQuerySystemTime(
    _Out_ PLARGE_INTEGER SystemTime
    );

//[Time]
NTSTATUS
NTAPI
NtQueryTimer(
    _In_ HANDLE TimerHandle,
    _In_ TIMER_INFORMATION_CLASS TimerInformationClass,
    _Out_ PVOID TimerInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[Time]
NTSTATUS
NTAPI
NtQueryTimerResolution(
    _Out_ PULONG MaxTime,
    _Out_ PULONG MinTime,
    _Out_ PULONG CurrTime
    );

//[Time]
NTSTATUS
NTAPI
NtSetIRTimer(
    _In_ HANDLE TimerHandle,
    _In_opt_ PLARGE_INTEGER Time
    );

//[Time]
NTSTATUS
NTAPI
NtSetSystemTime(
    _In_ PLARGE_INTEGER SystemTime,
    _Out_opt_ PLARGE_INTEGER PrevSystemTime
    );

//[Time]
NTSTATUS
NTAPI
NtSetTimer(
    _In_ HANDLE TimerHandle,
    _In_ PLARGE_INTEGER DueTime,
    _In_opt_ PTIMER_APC_ROUTINE TimerApcRoutine,
    _In_opt_ PVOID TimerContext,
    _In_ BOOLEAN WakeTimer,
    _In_opt_ LONG Period,
    _Out_opt_ PBOOLEAN PreviousState
    );

//[Time]
NTSTATUS
NTAPI
NtSetTimer2(
    _In_ HANDLE TimerHandle,
    _In_ PLARGE_INTEGER DueTime,
    _In_opt_ PLARGE_INTEGER Period,
    _In_ PVOID Parameters
    );

//[Time]
NTSTATUS
NTAPI
NtSetTimerEx(
    _In_ HANDLE TimerHandle,
    _In_ TIMER_INFORMATION_CLASS TimerSetInformationClass,
    _Inout_ PVOID TimerSetInformation,
    _In_ ULONG Length
    );

//[Time]
NTSTATUS
NTAPI
NtSetTimerResolution(
    _In_ ULONG DesiredTime,
    _In_ BOOLEAN SetResolution,
    _Out_ PULONG ActualTime
    );

//[Transaction]
NTSTATUS
NTAPI
NtClearAllSavepointsTransaction(
  _In_ HANDLE TransactionHandle
    );

//[Transaction]
NTSTATUS
NTAPI
NtClearSavepointTransaction(
  _In_ HANDLE TransactionHandle,
  _In_ ULONG SavePointId
    );

//[Transaction]
NTSTATUS
NTAPI
NtCommitComplete(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtCommitEnlistment(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtCommitTransaction(
  _In_  HANDLE TransactionHandle,
  _In_  BOOLEAN Wait
    );

//[Transaction]
NTSTATUS
NTAPI
NtCreateEnlistment(
  _Out_     PHANDLE EnlistmentHandle,
  _In_      ACCESS_MASK DesiredAccess,
  _In_      HANDLE ResourceManagerHandle,
  _In_      HANDLE TransactionHandle,
  _In_opt_  POBJECT_ATTRIBUTES ObjectAttributes,
  _In_opt_  ULONG CreateOptions,
  _In_      NOTIFICATION_MASK NotificationMask,
  _In_opt_  PVOID EnlistmentKey
    );

//[Transaction]
NTSTATUS
NTAPI
NtCreateResourceManager(
  _Out_     PHANDLE ResourceManagerHandle,
  _In_      ACCESS_MASK DesiredAccess,
  _In_      HANDLE TmHandle,
  _In_opt_  PGUID ResourceManagerGuid,
  _In_opt_  POBJECT_ATTRIBUTES ObjectAttributes,
  _In_opt_  ULONG CreateOptions,
  _In_opt_  PUNICODE_STRING Description
    );

//[Transaction]
NTSTATUS
NTAPI
NtCreateTransaction(
  _Out_     PHANDLE TransactionHandle,
  _In_      ACCESS_MASK DesiredAccess,
  _In_opt_  POBJECT_ATTRIBUTES ObjectAttributes,
  _In_opt_  PVOID Uow,
  _In_opt_  HANDLE TmHandle,
  _In_opt_  ULONG CreateOptions,
  _In_opt_  ULONG IsolationLevel,
  _In_opt_  ULONG IsolationFlags,
  _In_opt_  PLARGE_INTEGER Timeout,
  _In_opt_  PUNICODE_STRING Description
    );

//[Transaction]
NTSTATUS
NTAPI
NtCreateTransactionManager(
  _Out_     PHANDLE TmHandle,
  _In_      ACCESS_MASK DesiredAccess,
  _In_opt_  POBJECT_ATTRIBUTES ObjectAttributes,
  _In_opt_  PUNICODE_STRING LogFileName,
  _In_opt_  ULONG CreateOptions,
  _In_opt_  ULONG CommitStrength
    );

//[Transaction]
NTSTATUS
NTAPI
NtEnumerateTransactionObject(
  _In_opt_  HANDLE RootObjectHandle,
  _In_      KTMOBJECT_TYPE QueryType,
  _Inout_   PKTMOBJECT_CURSOR ObjectCursor,
  _In_      ULONG ObjectCursorLength,
  _Out_     PULONG ReturnLength
    );

//[Transaction]
NTSTATUS
NTAPI
NtFreezeTransactions(
  _In_ PLARGE_INTEGER FreezeTimeout,
  _In_ PLARGE_INTEGER ThawTimeout
    );

//[Transaction]
NTSTATUS
NTAPI
NtGetNotificationResourceManager(
  _In_       HANDLE ResourceManagerHandle,
  _Out_      PTRANSACTION_NOTIFICATION TransactionNotification,
  _In_       ULONG NotificationLength,
  _In_       PLARGE_INTEGER Timeout,
  _Out_opt_  PULONG ReturnLength,
  _In_       ULONG Asynchronous,
  _In_opt_   ULONG_PTR AsynchronousContext
    );

//[Transaction]
NTSTATUS
NTAPI
NtListTransactions(
    );

//[Transaction]
NTSTATUS
NTAPI
NtMarshallTransaction(
    );

//[Transaction]
NTSTATUS
NTAPI
NtOpenEnlistment(
  _Out_     PHANDLE EnlistmentHandle,
  _In_      ACCESS_MASK DesiredAccess,
  _In_      HANDLE RmHandle,
  _In_      PVOID EnlistmentGuid,
  _In_opt_  POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Transaction]
NTSTATUS
NTAPI
NtOpenResourceManager(
  _Out_     PHANDLE ResourceManagerHandle,
  _In_      ACCESS_MASK DesiredAccess,
  _In_      HANDLE TmHandle,
  _In_      PGUID ResourceManagerGuid,
  _In_opt_  POBJECT_ATTRIBUTES ObjectAttributes
    );

//[Transaction]
NTSTATUS
NTAPI
NtOpenTransaction(
  _Out_     PHANDLE TransactionHandle,
  _In_      ACCESS_MASK DesiredAccess,
  _In_opt_  POBJECT_ATTRIBUTES ObjectAttributes,
  _In_      PVOID Uow,
  _In_opt_  HANDLE TmHandle
    );

//[Transaction]
NTSTATUS
NTAPI
NtOpenTransactionManager(
  _Out_     PHANDLE TmHandle,
  _In_      ACCESS_MASK DesiredAccess,
  _In_opt_  POBJECT_ATTRIBUTES ObjectAttributes,
  _In_opt_  PUNICODE_STRING LogFileName,
  _In_opt_  PVOID TmIdentity,
  _In_opt_  ULONG OpenOptions
    );

//[Transaction]
NTSTATUS
NTAPI
NtPrePrepareComplete(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtPrePrepareEnlistment(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtPrepareComplete(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtPrepareEnlistment(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtPropagationComplete(
  _In_ HANDLE ResourceManagerHandle,
  _In_ ULONG RequestCookie,
  _In_ ULONG BufferLength,
  _In_ PVOID Buffer
    );

//[Transaction]
NTSTATUS
NTAPI
NtPropagationFailed(
  _In_ HANDLE ResourceManagerHandle,
  _In_ ULONG RequestCookie,
  _In_ NTSTATUS PropStatus
    );

//[Transaction]
NTSTATUS
NTAPI
NtPullTransaction(
    );

//[Transaction]
NTSTATUS
NTAPI
NtQueryInformationEnlistment(
  _In_       HANDLE EnlistmentHandle,
  _In_       ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
  _Out_      PVOID EnlistmentInformation,
  _In_       ULONG Length,
  _Out_opt_  PULONG ReturnLength
    );

//[Transaction]
NTSTATUS
NTAPI
NtQueryInformationResourceManager(
  _In_       HANDLE ResourceManagerHandle,
  _In_       RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
  _Out_      PVOID ResourceManagerInformation,
  _In_       ULONG Length,
  _Out_opt_  PULONG ReturnLength
    );

//[Transaction]
NTSTATUS
NTAPI
NtQueryInformationTransaction(
  _In_       HANDLE TransactionHandle,
  _In_       TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
  _Out_      PVOID TransactionInformation,
  _In_       ULONG Length,
  _Out_opt_  PULONG ReturnLength
    );

//[Transaction]
NTSTATUS
NTAPI
NtQueryInformationTransactionManager(
  _In_       HANDLE TransactionManagerHandle,
  _In_       TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
  _Out_      PVOID TransactionManagerInformation,
  _In_       ULONG Length,
  _Out_opt_  PULONG ReturnLength
    );

//[Transaction]
NTSTATUS
NTAPI
NtReadOnlyEnlistment(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtRecoverEnlistment(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PVOID EnlistmentKey
    );

//[Transaction]
NTSTATUS
NTAPI
NtRecoverResourceManager(
  _In_  HANDLE ResourceManagerHandle
    );

//[Transaction]
NTSTATUS
NTAPI
NtRecoverTransactionManager(
  _In_  HANDLE TransactionManagerHandle
    );

//[Transaction]
NTSTATUS
NTAPI
NtRegisterProtocolAddressInformation(
    _In_ HANDLE ResourceManager,
    _In_ PGUID ProtocolId,
    _In_ ULONG ProtocolInformationSize,
    _In_ PVOID ProtocolInformation,
    _In_ ULONG CreateOptions 
    );

//[Transaction]
NTSTATUS
NTAPI
NtRenameTransactionManager(
  _In_ PUNICODE_STRING LogFileName,
  _In_ PGUID ExistingTransactionManagerGuid
    );

//[Transaction]
NTSTATUS
NTAPI
NtRollbackComplete(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtRollbackEnlistment(
  _In_      HANDLE EnlistmentHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtRollbackSavepointTransaction(
  _In_ HANDLE TransactionHandle,
  _In_ ULONG SavePointId
    );

//[Transaction]
NTSTATUS
NTAPI
NtRollbackTransaction(
  _In_  HANDLE TransactionHandle,
  _In_  BOOLEAN Wait
    );

//[Transaction]
NTSTATUS
NTAPI
NtRollforwardTransactionManager(
  _In_      HANDLE TransactionManagerHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtSavepointComplete(
  _In_      HANDLE TransactionHandle,
  _In_opt_  PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtSavepointTransaction(
    _In_ HANDLE TransactionHandle,
    _In_ BOOLEAN Flag,
    _Out_ PULONG SavePointId
    );

//[Transaction]
NTSTATUS
NTAPI
NtSetInformationEnlistment(
  _In_  HANDLE EnlistmentHandle,
  _In_  ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
  _In_  PVOID EnlistmentInformation,
  _In_  ULONG Length
    );

//[Transaction]
NTSTATUS
NTAPI
NtSetInformationResourceManager(
  _In_  HANDLE ResourceManagerHandle,
  _In_  RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
  _In_  PVOID ResourceManagerInformation,
  _In_  ULONG Length
    );

//[Transaction]
NTSTATUS
NTAPI
NtSetInformationTransaction(
  _In_  HANDLE TransactionHandle,
  _In_  TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
  _In_  PVOID TransactionInformation,
  _In_  ULONG Length
    );

//[Transaction]
NTSTATUS
NTAPI
NtSetInformationTransactionManager(
  _In_  HANDLE TransactionManagerHandle,
  _In_  TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
  _In_  PVOID TransactionManagerInformation,
  _In_  ULONG Length
    );

//[Transaction]
NTSTATUS
NTAPI
NtSinglePhaseReject(
  _In_ HANDLE EnlistmentHandle,
  _In_opt_ PLARGE_INTEGER TmVirtualClock
    );

//[Transaction]
NTSTATUS
NTAPI
NtStartTm(
    );

//[Transaction]
NTSTATUS
NTAPI
NtThawTransactions(
    );

//[WNF]
NTSTATUS
NTAPI
NtCreateWnfStateName(
    _Out_ PCWNF_STATE_NAME StateName,
    _In_ ULONG Lifetime,
    _In_ ULONG DataScope,
    _In_ BOOLEAN PersistData,
    _In_opt_ PVOID TypeId,
    _In_ ULONG MaximumStateSize,
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor
    );

//[WNF]
NTSTATUS
NTAPI
NtDeleteWnfStateData(
    _In_ PCWNF_STATE_NAME StateName,
    _In_opt_ PVOID ExplicitScope
    );

//[WNF]
NTSTATUS
NTAPI
NtDeleteWnfStateName(
    _In_ PCWNF_STATE_NAME StateName
    );

//[WNF]
NTSTATUS
NTAPI
NtGetCompleteWnfStateSubscription(
    _In_opt_ PWNF_STATE_NAME OldDescriptorStateName,
    _In_opt_ PULONG OldSubscriptionId,
    _In_opt_ ULONG OldDescriptorEventMask,
    _In_opt_ ULONG OldDescriptorStatus,
    _Out_ PVOID NewDeliveryDescriptor,
    _In_ ULONG DescriptorSize
    );

//[WNF]
NTSTATUS
NTAPI
NtQueryWnfStateData(
    _In_ PCWNF_STATE_NAME StateName,
    _In_opt_ PVOID TypeId,
    _In_opt_ const PVOID ExplicitScope,
    _Out_ PULONG ChangeStamp,
    _Out_ PVOID Buffer,
    _Inout_ PULONG BufferSize
    );

//[WNF]
NTSTATUS
NTAPI
NtQueryWnfStateNameInformation(
    _In_ PCWNF_STATE_NAME StateName,
    _In_ ULONG NameInfoClass,
    _In_opt_ PVOID ExplicitScope,
    _Out_ PVOID InfoBuffer,
    _In_ ULONG InfoBufferSize
    );

//[WNF]
NTSTATUS
NTAPI
NtSetWnfProcessNotificationEvent(
    _In_ HANDLE NotificationEvent
    );

//[WNF]
NTSTATUS
NTAPI
NtSubscribeWnfStateChange(
    _In_ PCWNF_STATE_NAME StateName,
    _In_opt_ ULONG ChangeStamp,
    _In_ ULONG EventMask,
    _Out_opt_ PULONG SubscriptionId
    );

//[WNF]
NTSTATUS
NTAPI
NtUnsubscribeWnfStateChange(
    _In_ PCWNF_STATE_NAME StateName
    );

//[WNF]
NTSTATUS
NTAPI
NtUpdateWnfStateData(
    _In_ PCWNF_STATE_NAME StateName,
    _In_ PVOID Buffer,
    _In_opt_ ULONG Length,
    _In_opt_ PULONG TypeId,
    _In_opt_ PVOID ExplicitScope,
    _In_ ULONG MatchingChangeStamp,
    _In_ ULONG CheckStamp
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64AllocateVirtualMemory64(
    _In_ HANDLE ProcessHandle,
    _Inout_ PPVOID lpAddress,
    _In_ ULONG_PTR ZeroBitsLow,
    _In_ ULONG_PTR ZeroBitsHigh,
    _Inout_ PSIZE_T pSize,
    _In_ ULONG flAllocationType,
    _In_ ULONG flProtect
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CallFunction64(
    _In_ ULONG FunctionIndex,
    _In_ ULONG Flags,
    _In_ ULONG InputBufferLength,
    _In_ PVOID InputBuffer,
    _In_ ULONG OutputBufferLength,
    _Out_ PVOID OutputBuffer,
    _Out_ PULONG ReturnStatus
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrAllocateCaptureBuffer(
    ULONG ArgumentCount,
    ULONG BufferSize
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrAllocateMessagePointer(
    _In_ PVOID CaptureBuffer,
    _In_ ULONG MessageLength,
    _Out_ PPVOID CaptureData
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrCaptureMessageBuffer(
    _In_ PVOID CaptureBuffer,
    _In_ PVOID MessageBuffer,
    _In_ ULONG MessageLength,
    _Out_ PPVOID CaptureData
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrCaptureMessageString(
    _In_ PVOID CaptureBuffer,
    _In_ PSTR String,
    _In_ ULONG StringLength,
    _In_ ULONG MaximumLength,
    _Out_ PVOID CapturedString
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrClientCallServer(
    _Inout_ PVOID ApiMessage,
    _Inout_opt_ PVOID CaptureBuffer,
    _In_ ULONG ApiNumber,
    _In_ ULONG RequestLength 
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrClientConnectToServer(
    _In_ PWSTR ObjectDirectory,
    _In_ ULONG ServerId,
    _In_ PVOID ConnectionInfo,
    _Inout_ PULONG ConnectionInfoSize,
    _Out_ PBOOLEAN ServerToServerCall
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrFreeCaptureBuffer(
    _In_ PVOID CaptureBuffer
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrGetProcessId(
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrIdentifyAlertableThread(
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64CsrVerifyRegion(
    _In_ PVOID Buffer,
    _In_ ULONG Length
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64DebuggerCall(
    ULONG Function,
    ULONG Arg1,
    ULONG Arg2,
    ULONG Arg3,
    ULONG arg4
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64GetNativeSystemInformation(
    _In_ SYSTEM_INFORMATION_CLASS SystemInformationClass,
    _Out_ PVOID SystemInformation,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64InterlockedPopEntrySList(
    _Inout_ PVOID ListHead
    );

//[WOW64]
ULONG
NTAPI
NtWow64IsProcessorFeaturePresent(
    _In_ ULONG ProcessorFeature
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64QueryInformationProcess64(
    _In_ HANDLE ProcessHandle,
    _In_ PROCESSINFOCLASS ProcessInformationClass,
    _Out_ PVOID ProcessInformation64,
    _In_ ULONG Length,
    _Out_opt_ PULONG ReturnLength
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64QueryVirtualMemory64(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddressLow,
    _In_ PVOID BaseAddressHigh,
    _In_ MEMORY_INFORMATION_CLASS MemoryInformationClass,
    _Out_ PVOID MemoryInformation, /* NB must be 64bit aligned */
    _In_ ULONG LengthLow,
    _In_ ULONG LengthHigh,
    _Out_opt_ PULONGLONG ReturnLength
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64ReadVirtualMemory64(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID AddressLow,
    _In_ PVOID AddressHigh,
    _Out_ PVOID Buffer,
    _In_ ULONG BufferSizeLow,
    _In_ ULONG BufferSizeHigh,
    _Out_opt_ PULONGLONG BytesRead
    );

//[WOW64]
NTSTATUS
NTAPI
NtWow64WriteVirtualMemory64(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID AddressLow,
    _In_ PVOID AddressHigh,
    _In_ PVOID Buffer,
    _In_ ULONG BufferSizeLow,
    _In_ ULONG BufferSizeHigh,
    _Out_opt_ PULONGLONG BytesWritten
    );
