// GDI32 DLL Native Interface entry points

// @author Roger Orr mailto:rogero@howzatt.co.uk
// Bug reports, comments, and suggestions are always welcome.

// Copyright &copy; 2013 under the MIT license:
//
//  "Permission is hereby granted, free of charge, to any person obtaining a
//  copy of this software and associated documentation files (the "Software"),
//  to deal in the Software without restriction, including without limitation
//  the rights to use, copy, modify, merge, publish, distribute, sublicense,
//  and/or sell copies of the Software, and to permit persons to whom the
//  Software is furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
//  IN THE SOFTWARE."

// $Id: Gdi32Trace.cfg 2666 2025-04-21 14:11:00Z roger $

//[win32u.dll]
//[Gdi32.dll]
//[Other]

typedef HANDLE DHPDEV;
typedef HANDLE DHSURF;
typedef HANDLE HACCEL;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDESK;
typedef HANDLE HDEV;
typedef HANDLE HDWP;
typedef HANDLE HFONT;
typedef HANDLE HHOOK;
typedef HANDLE HKL;
typedef HANDLE HLSURF;
typedef HANDLE HMENU;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef HANDLE HRAWINPUT;
typedef HANDLE HRGN;
typedef HANDLE HSURF;
typedef HANDLE HUMPD;
typedef HANDLE HWINEVENTHOOK;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef HANDLE OPM_PROTECTED_OUTPUT_HANDLE;

typedef PHANDLE PHDC;
typedef PHANDLE POPM_PROTECTED_OUTPUT_HANDLE;

typedef PULONG PCOLORPALETTEINFO;
typedef PULONG PCOLORREF;
typedef PULONG PICM_DIB_INFO;

typedef PVOID LPMC_VCP_CODE_TYPE;
typedef PVOID LPMC_TIMING_REPORT;
typedef PVOID MONITORENUMPROC;
typedef PVOID PACCEL;
typedef PVOID PARAM;
typedef PVOID PBITMAPINFO;
typedef PVOID PBLENDOBJ;
typedef PVOID PBOOL;
typedef PVOID PBRUSHOBJ;
typedef PVOID PCHANGEFILTERSTRUCT;
typedef PVOID PCHWIDTHINFO;
typedef PVOID PCLIPLINE;
typedef PVOID PCLIPOBJ;
typedef PVOID PCOLORADJUSTMENT;
typedef PVOID PCOMBOBOXINFO;
typedef PVOID PCRAWINPUTDEVICE;
typedef PVOID PCRECT;
typedef PVOID PCURSORINFO;
typedef PVOID PCWSTR;
typedef PVOID PD3DNTHAL_CALLBACKS;
typedef PVOID PD3DNTHAL_CONTEXTCREATEI;
typedef PVOID PD3DNTHAL_CONTEXTDESTROYALLDATA;
typedef PVOID PD3DNTHAL_CONTEXTDESTROYDATA;
typedef PVOID PD3DNTHAL_DRAWPRIMITIVES2DATA;
typedef PVOID PD3DNTHAL_GLOBALDRIVERDATA;
typedef PVOID PD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA;
typedef PVOID PDDSURFACEDESC;
typedef PVOID PDDVIDEOPORTNOTIFY;
typedef PVOID PDD_ADDATTACHEDSURFACEDATA;
typedef PVOID PDD_BEGINMOCOMPFRAMEDATA;
typedef PVOID PDD_BLTDATA;
typedef PVOID PDD_CANCREATESURFACEDATA;
typedef PVOID PDD_CANCREATEVPORTDATA;
typedef PVOID PDD_COLORCONTROLDATA;
typedef PVOID PDD_CREATEMOCOMPDATA;
typedef PVOID PDD_CREATESURFACEDATA;
typedef PVOID PDD_CREATEVPORTDATA;
typedef PVOID PDD_D3DBUFCALLBACKS;
typedef PVOID PDD_DESTROYMOCOMPDATA;
typedef PVOID PDD_DESTROYVPORTDATA;
typedef PVOID PDD_ENDMOCOMPFRAMEDATA;
typedef PVOID PDD_FLIPDATA;
typedef PVOID PDD_FLIPTOGDISURFACEDATA;
typedef PVOID PDD_FLIPVPORTDATA;
typedef PVOID PDD_GETAVAILDRIVERMEMORYDATA;
typedef PVOID PDD_GETBLTSTATUSDATA;
typedef PVOID PDD_GETDRIVERINFODATA;
typedef PVOID PDD_GETDRIVERSTATEDATA;
typedef PVOID PDD_GETFLIPSTATUSDATA;
typedef PVOID PDD_GETINTERNALMOCOMPDATA;
typedef PVOID PDD_GETMOCOMPCOMPBUFFDATA;
typedef PVOID PDD_GETMOCOMPFORMATSDATA;
typedef PVOID PDD_GETMOCOMPGUIDSDATA;
typedef PVOID PDD_GETSCANLINEDATA;
typedef PVOID PDD_GETVPORTBANDWIDTHDATA;
typedef PVOID PDD_GETVPORTCONNECTDATA;
typedef PVOID PDD_GETVPORTFIELDDATA;
typedef PVOID PDD_GETVPORTFLIPSTATUSDATA;
typedef PVOID PDD_GETVPORTINPUTFORMATDATA;
typedef PVOID PDD_GETVPORTLINEDATA;
typedef PVOID PDD_GETVPORTOUTPUTFORMATDATA;
typedef PVOID PDD_GETVPORTSIGNALDATA;
typedef PVOID PDD_HALINFO;
typedef PVOID PDD_LOCKDATA;
typedef PVOID PDD_QUERYMOCOMPSTATUSDATA;
typedef PVOID PDD_RENDERMOCOMPDATA;
typedef PVOID PDD_SETCOLORKEYDATA;
typedef PVOID PDD_SETEXCLUSIVEMODEDATA;
typedef PVOID PDD_SETOVERLAYPOSITIONDATA;
typedef PVOID PDD_SURFACE_GLOBAL;
typedef PVOID PDD_SURFACE_LOCAL;
typedef PVOID PDD_SURFACE_MORE;
typedef PVOID PDD_UNLOCKDATA;
typedef PVOID PDD_UPDATEOVERLAYDATA;
typedef PVOID PDD_UPDATEVPORTDATA;
typedef PVOID PDD_VPORTCOLORDATA;
typedef PVOID PDD_WAITFORVERTICALBLANKDATA;
typedef PVOID PDD_WAITFORVPORTSYNCDATA;
typedef PVOID PDESIGNVECTOR;
typedef PVOID PDEVCAPS;
typedef PVOID PDEVMODEW;
typedef PVOID PDOCINFOW;
typedef PVOID PDOWNLOADDESIGNVECTOR;
typedef PVOID PDRIVER_INFO_2W;
typedef PVOID PDXGI_FORMAT;
typedef PVOID PDXGKMDT_OPM_CONFIGURE_PARAMETERS;
typedef PVOID PDXGKMDT_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS;
typedef PVOID PDXGKMDT_OPM_ENCRYPTED_PARAMETERS;
typedef PVOID PDXGKMDT_OPM_GET_INFO_PARAMETERS;
typedef PVOID PDXGKMDT_OPM_RANDOM_NUMBER;
typedef PVOID PDXGKMDT_OPM_REQUESTED_INFORMATION;
typedef PVOID PENUMLOGFONTEXDVW;
typedef PVOID PEXTLOGFONTW;
typedef PVOID PEXTTEXTMETRIC;
typedef PVOID PFD_GLYPHATTR;
typedef PVOID PFD_GLYPHSET;
typedef PVOID PFLASHWINFO;
typedef PVOID PFLATPTR;
typedef PVOID PFLONG;
typedef PVOID PFONTINFO;
typedef PVOID PFONTOBJ;
typedef PVOID PFONTSIGNATURE;
typedef PVOID PFONT_FILE_INFO;
typedef PVOID PFONT_REALIZATION_INFO;
typedef PVOID PGCP_RESULTSW;
typedef PVOID PGESTURECONFIG;
typedef PVOID PGLYPHMETRICS;
typedef PVOID PGLYPHSET;
typedef PVOID PGUITHREADINFO;
typedef PVOID PHGLYPH;
typedef PVOID PHLSURF_INFORMATION_PROBE;
typedef PVOID PHUMPD;
typedef PVOID PIFIMETRICS;
typedef PVOID PINPUT;
typedef PVOID PKERNEL_PVOID;
typedef PVOID PKERNINGPAIR;
typedef PVOID PLINEATTRS;
typedef PVOID PLOGCOLORSPACEEXW;
typedef PVOID PLOGCOLORSPACEW;
typedef PVOID PLOGPALETTE;
typedef PVOID PMAT2;
typedef PVOID PMENUBARINFO;
typedef PVOID PMOUSEMOVEPOINT;
typedef PVOID POUTLINETEXTMETRICW;
typedef PVOID PPAINTSTRUCT;
typedef PVOID PPALETTEENTRY;
typedef PVOID PPATHDATA;
typedef PVOID PPATHOBJ;
typedef PVOID PPERBANDINFO;
typedef PVOID PPGLYPHPOS;
typedef PVOID PPIXELFORMATDESCRIPTOR;
typedef PVOID PPOINT;
typedef PVOID PPOINTFIX;
typedef PVOID PPOINTL;
typedef PVOID PPOINTQF;
typedef PVOID PPOLYPATBLT;
typedef PVOID PPOLYTEXTW;
typedef PVOID PRASTERIZER_STATUS;
typedef PVOID PRAWINPUTDEVICE;
typedef PVOID PRAWINPUTDEVICELIST;
typedef PVOID PRECT;
typedef PVOID PRECTFX;
typedef PVOID PRECTL;
typedef PVOID PRGNDATA;
typedef PVOID PSCROLLBARINFO;
typedef PVOID PSIZE;
typedef PVOID PSTROBJ;
typedef PVOID PSURFOBJ;
typedef PVOID PTITLEBARINFO;
typedef PVOID PTMDIFF;
typedef PVOID PTMW_INTERNAL;
typedef PVOID PTPMPARAMS;
typedef PVOID PTRACKMOUSEEVENT;
typedef PVOID PTRIVERTEX;
typedef PVOID PUNIVERSAL_FONT_ID;
typedef PVOID PUSHORT;
typedef PVOID PVIDEOMEMORY;
typedef PVOID PVOID;
typedef PVOID PWCHAR;
typedef PVOID PWIDTHDATA;
typedef PVOID PWINDOWPLACEMENT;
typedef PVOID PXFORM;
typedef PVOID PXFORML;
typedef PVOID PXFORMOBJ;
typedef PVOID PXLATEOBJ;
typedef PVOID TIMERPROC;

typedef ULONG ARCTYPE;
typedef ULONG BLENDFUNCTION;
typedef ULONG BYTE;
typedef ULONG COLORPALETTEINFO;
typedef ULONG COLORREF;
typedef ULONG DXGI_FORMAT;
typedef ULONG DXGKMDT_CERTIFICATE_TYPE;
typedef ULONG DXGKMDT_OPM_VIDEO_OUTPUT_SEMANTICS;
typedef ULONG FLONG;
typedef ULONG HLSURF_INFORMATION_CLASS;
typedef ULONG ICM_DIB_INFO;
typedef ULONG LFTYPE;
typedef ULONG MIX;
typedef ULONG PALETTEENTRY;
typedef ULONG ROP4;

typedef ULONGLONG POINT;
typedef ULONGLONG SIZEL;

// Originally extracted from NtGdi.h using gdi32.sed

BOOL
WINAPI
NtGdiInit(
    );

int
WINAPI
NtGdiSetDIBitsToDeviceInternal(
    _In_ HDC hdcDest,
    _In_ int xDst,
    _In_ int yDst,
    _In_ DWORD cx,
    _In_ DWORD cy,
    _In_ int xSrc,
    _In_ int ySrc,
    _In_ DWORD iStartScan,
    _In_ DWORD cNumScan,
    _In_ PBYTE pInitBits,
    _In_ PBITMAPINFO pbmi,
    _In_ DWORD iUsage,
    _In_ UINT cjMaxBits,
    _In_ UINT cjMaxInfo,
    _In_ BOOL bTransformCoordinates,
    _In_opt_ HANDLE hcmXform
    );

BOOL
WINAPI
NtGdiGetFontResourceInfoInternalW(
    _In_ PWSTR pwszFiles,
    _In_ ULONG cwc,
    _In_ ULONG cFiles,
    _In_ UINT cjIn,
    _Out_ PDWORD pdwBytes,
    _Out_ PVOID pvBuf,
    _In_ DWORD iType
    );

DWORD
WINAPI
NtGdiGetGlyphIndicesW(
    _In_ HDC hdc,
    _In_opt_ PWSTR pwc,
    _In_ int cwc,
    _Out_opt_ PWORD pgi,
    _In_ DWORD iMode
    );

DWORD
WINAPI
NtGdiGetGlyphIndicesWInternal(
    _In_ HDC hdc,
    _In_opt_ PWSTR pwc,
    _In_ int cwc,
    _Out_opt_ PWORD pgi,
    _In_ DWORD iMode,
    _In_ BOOL bSubset
    );


HPALETTE
WINAPI
NtGdiCreatePaletteInternal(
    _In_ PLOGPALETTE pLogPal,
    _In_ UINT cEntries
    );

BOOL
WINAPI
NtGdiArcInternal(
    _In_ ARCTYPE arctype,
    _In_ HDC hdc,
    _In_ int x1,
    _In_ int y1,
    _In_ int x2,
    _In_ int y2,
    _In_ int x3,
    _In_ int y3,
    _In_ int x4,
    _In_ int y4
    );

int

WINAPI
NtGdiStretchDIBitsInternal(
    _In_ HDC hdc,
    _In_ int xDst,
    _In_ int yDst,
    _In_ int cxDst,
    _In_ int cyDst,
    _In_ int xSrc,
    _In_ int ySrc,
    _In_ int cxSrc,
    _In_ int cySrc,
    _In_opt_ PBYTE pjInit,
    _In_ PBITMAPINFO pbmi,
    _In_ DWORD dwUsage,
    _In_ DWORD dwRop4,
    _In_ UINT cjMaxInfo,
    _In_ UINT cjMaxBits,
    _In_ HANDLE hcmXform
    );

ULONG
WINAPI
NtGdiGetOutlineTextMetricsInternalW(
    _In_ HDC hdc,
    _In_ ULONG cjotm,
    _Out_opt_ POUTLINETEXTMETRICW potmw,
    _Out_ PTMDIFF ptmd
    );

BOOL
WINAPI
NtGdiGetAndSetDCDword(
    _In_ HDC hdc,
    _In_ UINT u,
    _In_ DWORD dwIn,
    _Out_ PDWORD pdwResult
    );

HANDLE
WINAPI
NtGdiGetDCObject(
    _In_ HDC hdc,
    _In_ int itype
    );

HDC
WINAPI
NtGdiGetDCforBitmap(
    _In_ HBITMAP hsurf
    );

BOOL
WINAPI
NtGdiGetMonitorID(
    _In_ HDC hdc,
    _In_ DWORD dwSize,
    _Out_ PWSTR pszMonitorID
    );


INT
WINAPI
NtGdiGetLinkedUFIs(
    _In_ HDC hdc,
    _Out_opt_ PUNIVERSAL_FONT_ID pufiLinkedUFIs,
    _In_ INT BufferSize
    );

BOOL
WINAPI
NtGdiSetLinkedUFIs(
    _In_ HDC hdc,
    _In_ PUNIVERSAL_FONT_ID pufiLinks,
    _In_ ULONG uNumUFIs
    );

BOOL
WINAPI
NtGdiGetUFI(
    _In_ HDC hdc,
    _Out_ PUNIVERSAL_FONT_ID pufi,
    _Out_opt_ PDESIGNVECTOR pdv,
    _Out_ PULONG pcjDV,
    _Out_ PULONG pulBaseCheckSum,
    _Out_ PFLONG pfl
    );

BOOL
WINAPI
NtGdiForceUFIMapping(
    _In_ HDC hdc,
    _In_ PUNIVERSAL_FONT_ID pufi
    );

BOOL
WINAPI
NtGdiGetUFIPathname(
    _In_ PUNIVERSAL_FONT_ID pufi,
    _Out_ PULONG pcwc,
    _Out_opt_ PWSTR pwszPathname,
    _Out_opt_ PULONG pcNumFiles,
    _In_ FLONG fl,
    _Out_opt_ PBOOL pbMemFont,
    _Out_opt_ PULONG pcjView,
    _Out_opt_ PVOID pvView,
    _Out_opt_ PBOOL pbTTC,
    _Out_opt_ PULONG piTTC
    );

BOOL
WINAPI
NtGdiAddRemoteFontToDC(
    _In_ HDC hdc,
    _In_ PVOID pvBuffer,
    _In_ ULONG cjBuffer,
    _In_opt_ PUNIVERSAL_FONT_ID pufi
    );

HANDLE
WINAPI
NtGdiAddFontMemResourceEx(
    _In_ PVOID pvBuffer,
    _In_ DWORD cjBuffer,
    _In_opt_ PDESIGNVECTOR pdv,
    _In_ ULONG cjDV,
    _Out_ PDWORD pNumFonts
    );

BOOL
WINAPI
NtGdiRemoveFontMemResourceEx(
    _In_ HANDLE hMMFont
    );

BOOL
WINAPI
NtGdiUnmapMemFont(
    _In_ PVOID pvView
    );

BOOL
WINAPI
NtGdiRemoveMergeFont(
    _In_ HDC hdc,
    _In_ PUNIVERSAL_FONT_ID pufi
    );

BOOL
WINAPI
NtGdiAnyLinkedFonts();


BOOL
WINAPI
NtGdiGetEmbUFI(
    _In_ HDC hdc,
    _Out_ PUNIVERSAL_FONT_ID pufi,
    _Out_opt_ PDESIGNVECTOR pdv,
    _Out_ PULONG pcjDV,
    _Out_ PULONG pulBaseCheckSum,
    _Out_ PFLONG pfl,
    _Out_ PKERNEL_PVOID embFontID
    );

ULONG
WINAPI
NtGdiGetEmbedFonts(
    );

BOOL
WINAPI
NtGdiChangeGhostFont(
    _In_ PKERNEL_PVOID pfontID,
    _In_ BOOL bLoad
    );

BOOL
WINAPI
NtGdiAddEmbFontToDC(
    _In_ HDC hdc,
    _In_ PPVOID pFontID
    );

BOOL
WINAPI
NtGdiFontIsLinked(
    _In_ HDC hdc
    );

ULONG_PTR
WINAPI
NtGdiPolyPolyDraw(
    _In_ HDC hdc,
    _In_ PPOINT ppt,
    _In_ PULONG pcpt,
    _In_ ULONG ccpt,
    _In_ int iFunc
    );

LONG
WINAPI
NtGdiDoPalette(
    _In_ HPALETTE hpal,
    _In_ WORD iStart,
    _In_ WORD cEntries,
    _In_opt_ PPALETTEENTRY pPalEntries,
    _In_ DWORD iFunc,
    _In_ BOOL bInbound
    );

BOOL
WINAPI
NtGdiComputeXformCoefficients(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiGetWidthTable(
    _In_ HDC hdc,
    _In_ ULONG cSpecial,
    _In_ PWCHAR pwc,
    _In_ ULONG cwc,
    _Out_ PUSHORT psWidth,
    _Out_opt_ PWIDTHDATA pwd,
    _Out_ PFLONG pflInfo
    );

int
WINAPI
NtGdiDescribePixelFormat(
    _In_ HDC hdc,
    _In_ int ipfd,
    _In_ UINT cjpfd,
    _Out_ PPIXELFORMATDESCRIPTOR ppfd
    );

BOOL
WINAPI
NtGdiSetPixelFormat(
    _In_ HDC hdc,
    _In_ int ipfd
    );

BOOL
WINAPI
NtGdiSwapBuffers(
    _In_ HDC hdc
    );

DWORD
WINAPI
NtGdiDxgGenericThunk(
    _In_ ULONG_PTR ulIndex,
    _In_ ULONG_PTR ulHandle,
    _Inout_ PSIZE_T pdwSizeOfPtr1,
    _Inout_ PVOID pvPtr1,
    _Inout_ PSIZE_T pdwSizeOfPtr2,
    _Inout_ PVOID pvPtr2
    );

DWORD
WINAPI
NtGdiDdAddAttachedSurface(
    _In_ HANDLE hSurface,
    _In_ HANDLE hSurfaceAttached,
    _Inout_ PDD_ADDATTACHEDSURFACEDATA puAddAttachedSurfaceData
    );

BOOL
WINAPI
NtGdiDdAttachSurface(
    _In_ HANDLE  hSurfaceFrom,
    _In_ HANDLE  hSurfaceTo
    );

DWORD
WINAPI
NtGdiDdBlt(
    _In_ HANDLE hSurfaceDest,
    _In_ HANDLE hSurfaceSrc,
    _Inout_ PDD_BLTDATA puBltData
    );

DWORD
WINAPI
NtGdiDdCanCreateSurface(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_CANCREATESURFACEDATA puCanCreateSurfaceData
    );

DWORD
WINAPI
NtGdiDdColorControl(
    _In_ HANDLE hSurface,
    _Inout_ PDD_COLORCONTROLDATA puColorControlData
    );

HANDLE
WINAPI
NtGdiDdCreateDirectDrawObject(
    _In_ HDC hdc
    );

DWORD
WINAPI
NtGdiDdCreateSurface(
    _In_ HANDLE hDirectDraw,
    _In_ PHANDLE hSurface,
    _Inout_ PDDSURFACEDESC puSurfaceDescription,
    _Inout_ PDD_SURFACE_GLOBAL puSurfaceGlobalData,
    _Inout_ PDD_SURFACE_LOCAL puSurfaceLocalData,
    _Inout_ PDD_SURFACE_MORE puSurfaceMoreData,
    _Inout_ PDD_CREATESURFACEDATA puCreateSurfaceData,
    _Out_ PHANDLE puhSurface
    );

// only defined if COMBOX_SANDBOX is defined
DWORD
WINAPI
NtGdiDdChangeSurfacePointer(
    _In_ HANDLE hSurface,
    _In_ PVOID pSurfacePointer
    );


HANDLE
WINAPI
NtGdiDdCreateSurfaceObject(
    _In_ HANDLE hDirectDrawLocal,
    _In_ HANDLE hSurface,
    _In_ PDD_SURFACE_LOCAL puSurfaceLocal,
    _In_ PDD_SURFACE_MORE puSurfaceMore,
    _In_ PDD_SURFACE_GLOBAL puSurfaceGlobal,
    _In_ BOOL bComplete
    );

BOOL
WINAPI
NtGdiDdDeleteSurfaceObject(
    _In_ HANDLE hSurface
    );

BOOL
WINAPI
NtGdiDdDeleteDirectDrawObject(
    _In_ HANDLE hDirectDrawLocal
    );

DWORD
WINAPI
NtGdiDdDestroySurface(
    _In_ HANDLE hSurface,
    _In_ BOOL bRealDestroy
    );

DWORD
WINAPI
NtGdiDdFlip(
    _In_ HANDLE hSurfaceCurrent,
    _In_ HANDLE hSurfaceTarget,
    _In_ HANDLE hSurfaceCurrentLeft,
    _In_ HANDLE hSurfaceTargetLeft,
    _Inout_ PDD_FLIPDATA puFlipData
    );

DWORD
WINAPI
NtGdiDdGetAvailDriverMemory(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETAVAILDRIVERMEMORYDATA puGetAvailDriverMemoryData
    );

DWORD
WINAPI
NtGdiDdGetBltStatus(
    _In_ HANDLE hSurface,
    _Inout_ PDD_GETBLTSTATUSDATA puGetBltStatusData
    );

HDC
WINAPI
NtGdiDdGetDC(
    _In_ HANDLE hSurface,
    _In_ PPALETTEENTRY puColorTable
    );

DWORD
WINAPI
NtGdiDdGetDriverInfo(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETDRIVERINFODATA puGetDriverInfoData
    );

DWORD
WINAPI
NtGdiDdGetFlipStatus(
    _In_ HANDLE hSurface,
    _Inout_ PDD_GETFLIPSTATUSDATA puGetFlipStatusData
    );

DWORD
WINAPI
NtGdiDdGetScanLine(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETSCANLINEDATA puGetScanLineData
    );

DWORD
WINAPI
NtGdiDdSetExclusiveMode(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_SETEXCLUSIVEMODEDATA puSetExclusiveModeData
    );

DWORD
WINAPI
NtGdiDdFlipToGDISurface(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_FLIPTOGDISURFACEDATA puFlipToGDISurfaceData
    );

DWORD
WINAPI
NtGdiDdLock(
    _In_ HANDLE hSurface,
    _Inout_ PDD_LOCKDATA puLockData,
    _In_ HDC hdcClip
    );

BOOL
WINAPI
NtGdiDdQueryDirectDrawObject(
    _In_ HANDLE hDirectDrawLocal,
    _Out_ PDD_HALINFO pHalInfo,
    _Out_ PDWORD pCallBackFlags,
    _Out_opt_ PD3DNTHAL_CALLBACKS puD3dCallbacks,
    _Out_opt_ PD3DNTHAL_GLOBALDRIVERDATA puD3dDriverData,
    _Out_opt_ PDD_D3DBUFCALLBACKS puD3dBufferCallbacks,
    _Out_opt_ PDDSURFACEDESC puD3dTextureFormats,
    _Out_ PDWORD puNumHeaps,
    _Out_opt_ PVIDEOMEMORY puvmList,
    _Out_ PDWORD puNumFourCC,
    _Out_opt_ PDWORD puFourCC
    );

BOOL
WINAPI
NtGdiDdReenableDirectDrawObject(
    _In_ HANDLE hDirectDrawLocal,
    _Inout_ PBOOL pubNewMode
    );

BOOL
WINAPI
NtGdiDdReleaseDC(
    _In_ HANDLE hSurface
    );

BOOL
WINAPI
NtGdiDdResetVisrgn(
    _In_ HANDLE hSurface,
    _In_ HWND hwnd
    );

DWORD
WINAPI
NtGdiDdSetColorKey(
    _In_ HANDLE hSurface,
    _Inout_ PDD_SETCOLORKEYDATA puSetColorKeyData
    );

DWORD
WINAPI
NtGdiDdSetOverlayPosition(
    _In_ HANDLE hSurfaceSource,
    _In_ HANDLE hSurfaceDestination,
    _Inout_ PDD_SETOVERLAYPOSITIONDATA puSetOverlayPositionData
    );

VOID
WINAPI
NtGdiDdUnattachSurface(
    _In_ HANDLE hSurface,
    _In_ HANDLE hSurfaceAttached
    );

DWORD
WINAPI
NtGdiDdUnlock(
    _In_ HANDLE hSurface,
    _Inout_ PDD_UNLOCKDATA puUnlockData
    );

DWORD
WINAPI
NtGdiDdUpdateOverlay(
    _In_ HANDLE hSurfaceDestination,
    _In_ HANDLE hSurfaceSource,
    _Inout_ PDD_UPDATEOVERLAYDATA puUpdateOverlayData
    );

DWORD
WINAPI
NtGdiDdWaitForVerticalBlank(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_WAITFORVERTICALBLANKDATA puWaitForVerticalBlankData
    );

HANDLE
WINAPI
NtGdiDdGetDxHandle(
    _In_opt_ HANDLE hDirectDraw,
    _In_opt_ HANDLE hSurface,
    _In_ BOOL bRelease
    );

BOOL
WINAPI
NtGdiDdSetGammaRamp(
    _In_ HANDLE hDirectDraw,
    _In_ HDC hdc,
    _In_ PVOID pGammaRamp
    );

DWORD
WINAPI
NtGdiDdLockD3D(
    _In_ HANDLE hSurface,
    _Inout_ PDD_LOCKDATA puLockData
    );

DWORD
WINAPI
NtGdiDdUnlockD3D(
    _In_ HANDLE hSurface,
    _Inout_ PDD_UNLOCKDATA puUnlockData
    );

DWORD
WINAPI
NtGdiDdCreateD3DBuffer(
    _In_ HANDLE hDirectDraw,
    _Inout_ PHANDLE hSurface,
    _Inout_ PDDSURFACEDESC puSurfaceDescription,
    _Inout_ PDD_SURFACE_GLOBAL puSurfaceGlobalData,
    _Inout_ PDD_SURFACE_LOCAL puSurfaceLocalData,
    _Inout_ PDD_SURFACE_MORE puSurfaceMoreData,
    _Inout_ PDD_CREATESURFACEDATA puCreateSurfaceData,
    _Inout_ PHANDLE puhSurface
    );

DWORD
WINAPI
NtGdiDdCanCreateD3DBuffer(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_CANCREATESURFACEDATA puCanCreateSurfaceData
    );

DWORD
WINAPI
NtGdiDdDestroyD3DBuffer(
    _In_ HANDLE hSurface
    );

DWORD
WINAPI
NtGdiD3dContextCreate(
    _In_ HANDLE hDirectDrawLocal,
    _In_ HANDLE hSurfColor,
    _In_ HANDLE hSurfZ,
    _Inout_ PD3DNTHAL_CONTEXTCREATEI pdcci
    );

DWORD
WINAPI
NtGdiD3dContextDestroy(
    _In_ PD3DNTHAL_CONTEXTDESTROYDATA
    );

DWORD
WINAPI
NtGdiD3dContextDestroyAll(
    _Out_ PD3DNTHAL_CONTEXTDESTROYALLDATA pdcdad
    );

DWORD
WINAPI
NtGdiD3dValidateTextureStageState(
    _Inout_ PD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA pData
    );

DWORD
WINAPI
NtGdiD3dDrawPrimitives2(
    _In_ HANDLE hCmdBuf,
    _In_ HANDLE hVBuf,
    _Inout_ PD3DNTHAL_DRAWPRIMITIVES2DATA pded,
    _Inout_ PFLATPTR pfpVidMemCmd,
    _Inout_ PDWORD pdwSizeCmd,
    _Inout_ PFLATPTR pfpVidMemVtx,
    _Inout_ PDWORD pdwSizeVtx
    );

DWORD
WINAPI
NtGdiDdGetDriverState(
    _Inout_ PDD_GETDRIVERSTATEDATA pdata
    );

DWORD
WINAPI
NtGdiDdCreateSurfaceEx(
    _In_ HANDLE hDirectDraw,
    _In_ HANDLE hSurface,
    _In_ DWORD dwSurfaceHandle
    );

DWORD
WINAPI
NtGdiDvpCanCreateVideoPort(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_CANCREATEVPORTDATA puCanCreateVPortData
    );

DWORD
WINAPI
NtGdiDvpColorControl(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_VPORTCOLORDATA puVPortColorData
    );

HANDLE
WINAPI
NtGdiDvpCreateVideoPort(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_CREATEVPORTDATA puCreateVPortData
    );

DWORD
WINAPI
NtGdiDvpDestroyVideoPort(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_DESTROYVPORTDATA puDestroyVPortData
    );

DWORD
WINAPI
NtGdiDvpFlipVideoPort(
    _In_ HANDLE hVideoPort,
    _In_ HANDLE hDDSurfaceCurrent,
    _In_ HANDLE hDDSurfaceTarget,
    _Inout_ PDD_FLIPVPORTDATA puFlipVPortData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortBandwidth(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_GETVPORTBANDWIDTHDATA puGetVPortBandwidthData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortField(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_GETVPORTFIELDDATA puGetVPortFieldData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortFlipStatus(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETVPORTFLIPSTATUSDATA puGetVPortFlipStatusData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortInputFormats(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_GETVPORTINPUTFORMATDATA puGetVPortInputFormatData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortLine(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_GETVPORTLINEDATA puGetVPortLineData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortOutputFormats(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_GETVPORTOUTPUTFORMATDATA puGetVPortOutputFormatData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortConnectInfo(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETVPORTCONNECTDATA puGetVPortConnectData
    );

DWORD
WINAPI
NtGdiDvpGetVideoSignalStatus(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_GETVPORTSIGNALDATA puGetVPortSignalData
    );

DWORD
WINAPI
NtGdiDvpUpdateVideoPort(
    _In_ HANDLE hVideoPort,
    _In_ PHANDLE phSurfaceVideo,
    _In_ PHANDLE phSurfaceVbi,
    _Inout_ PDD_UPDATEVPORTDATA puUpdateVPortData
    );

DWORD
WINAPI
NtGdiDvpWaitForVideoPortSync(
    _In_ HANDLE hVideoPort,
    _Inout_ PDD_WAITFORVPORTSYNCDATA puWaitForVPortSyncData
    );

DWORD
WINAPI
NtGdiDvpAcquireNotification(
    _In_ HANDLE hVideoPort,
    _Inout_ PHANDLE hEvent,
    _In_ PDDVIDEOPORTNOTIFY pNotify
    );

DWORD
WINAPI
NtGdiDvpReleaseNotification(
    _In_ HANDLE hVideoPort,
    _In_ HANDLE hEvent
    );

DWORD
WINAPI
NtGdiDdGetMoCompGuids(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETMOCOMPGUIDSDATA puGetMoCompGuidsData
    );

DWORD
WINAPI
NtGdiDdGetMoCompFormats(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETMOCOMPFORMATSDATA puGetMoCompFormatsData
    );

DWORD
WINAPI
NtGdiDdGetMoCompBuffInfo(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETMOCOMPCOMPBUFFDATA puGetBuffData
    );

DWORD
WINAPI
NtGdiDdGetInternalMoCompInfo(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_GETINTERNALMOCOMPDATA puGetInternalData
    );

HANDLE
WINAPI
NtGdiDdCreateMoComp(
    _In_ HANDLE hDirectDraw,
    _Inout_ PDD_CREATEMOCOMPDATA puCreateMoCompData
    );

DWORD
WINAPI
NtGdiDdDestroyMoComp(
    _In_ HANDLE hMoComp,
    _Inout_ PDD_DESTROYMOCOMPDATA puDestroyMoCompData
    );

DWORD
WINAPI
NtGdiDdBeginMoCompFrame(
    _In_ HANDLE hMoComp,
    _Inout_ PDD_BEGINMOCOMPFRAMEDATA puBeginFrameData
    );

DWORD
WINAPI
NtGdiDdEndMoCompFrame(
    _In_ HANDLE hMoComp,
    _Inout_ PDD_ENDMOCOMPFRAMEDATA puEndFrameData
    );

DWORD
WINAPI
NtGdiDdRenderMoComp(
    _In_ HANDLE hMoComp,
    _Inout_ PDD_RENDERMOCOMPDATA puRenderMoCompData
    );

DWORD
WINAPI
NtGdiDdQueryMoCompStatus(
    _In_ HANDLE hMoComp,
    _Inout_ PDD_QUERYMOCOMPSTATUSDATA puQueryMoCompStatusData
    );

DWORD
WINAPI
NtGdiDdAlphaBlt(
    _In_ HANDLE hSurfaceDest,
    _In_opt_ HANDLE hSurfaceSrc,
    _Inout_ PDD_BLTDATA puBltData
    );



BOOL
WINAPI
NtGdiAlphaBlend(
    _In_ HDC hdcDst,
    _In_ LONG DstX,
    _In_ LONG DstY,
    _In_ LONG DstCx,
    _In_ LONG DstCy,
    _In_ HDC hdcSrc,
    _In_ LONG SrcX,
    _In_ LONG SrcY,
    _In_ LONG SrcCx,
    _In_ LONG SrcCy,
    _In_ BLENDFUNCTION BlendFunction,
    _In_ HANDLE hcmXform
    );

BOOL
WINAPI
NtGdiGradientFill(
    _In_ HDC hdc,
    _In_ PTRIVERTEX pVertex,
    _In_ ULONG nVertex,
    _In_ PVOID pMesh,
    _In_ ULONG nMesh,
    _In_ ULONG ulMode
    );


BOOL
WINAPI
NtGdiSetIcmMode(
    _In_ HDC hdc,
    _In_ ULONG nCommand,
    _In_ ULONG ulMode
    );





HANDLE
WINAPI
NtGdiCreateColorSpace(
    _In_ PLOGCOLORSPACEEXW pLogColorSpace
    );

BOOL
WINAPI
NtGdiDeleteColorSpace(
    _In_ HANDLE hColorSpace
    );

BOOL
WINAPI
NtGdiSetColorSpace(
    _In_ HDC hdc,
    _In_ HCOLORSPACE hColorSpace
    );

HANDLE
WINAPI
NtGdiCreateColorTransform(
    _In_ HDC hdc,
    _In_ PLOGCOLORSPACEW pLogColorSpaceW,
    _In_opt_ PVOID pvSrcProfile,
    _In_ ULONG cjSrcProfile,
    _In_opt_ PVOID pvDestProfile,
    _In_ ULONG cjDestProfile,
    _In_opt_ PVOID pvTargetProfile,
    _In_ ULONG cjTargetProfile
    );

BOOL
WINAPI
NtGdiDeleteColorTransform(
    _In_ HDC hdc,
    _In_ HANDLE hColorTransform
    );

BOOL
WINAPI
NtGdiCheckBitmapBits(
    _In_ HDC hdc,
    _In_ HANDLE hColorTransform,
    _In_ PVOID pvBits,
    _In_ ULONG bmFormat,
    _In_ DWORD dwWidth,
    _In_ DWORD dwHeight,
    _In_ DWORD dwStride,
    _Out_ PBYTE paResults
    );


ULONG
WINAPI
NtGdiColorCorrectPalette(
    _In_ HDC hdc,
    _In_ HPALETTE hpal,
    _In_ ULONG FirstEntry,
    _In_ ULONG NumberOfEntries,
    _Inout_ PPALETTEENTRY ppalEntry,
    _In_ ULONG Command
    );

ULONG_PTR
WINAPI
NtGdiGetColorSpaceforBitmap(
    _In_ HBITMAP hsurf
    );


BOOL
WINAPI
NtGdiGetDeviceGammaRamp(
    _In_ HDC hdc,
    _Out_ PVOID pGammaRamp
    );

BOOL
WINAPI
NtGdiSetDeviceGammaRamp(
    _In_ HDC hdc,
    _In_ PVOID pGammaRamp
    );

BOOL
WINAPI
NtGdiIcmBrushInfo(
    _In_ HDC hdc,
    _In_ HBRUSH hbrush,
    _Inout_ PBITMAPINFO pbmiDIB,
    _Inout_ PVOID pvBits,
    _Inout_ PULONG pulBits,
    _Out_opt_ PDWORD piUsage,
    _Out_opt_ PBOOL pbAlreadyTran,
    _In_ ULONG Command
    );




VOID
WINAPI
NtGdiFlush();

HDC
WINAPI
NtGdiCreateMetafileDC(
    _In_ HDC hdc
    );


BOOL
WINAPI
NtGdiMakeInfoDC(
    _In_ HDC hdc,
    _In_ BOOL bSet
    );

HANDLE
WINAPI
NtGdiCreateClientObj(
    _In_ ULONG ulType
    );

BOOL
WINAPI
NtGdiDeleteClientObj(
    _In_ HANDLE h
    );

LONG
WINAPI
NtGdiGetBitmapBits(
    _In_ HBITMAP hbm,
    _In_ ULONG cjMax,
    _Out_opt_ PBYTE pjOut
    );

BOOL
WINAPI
NtGdiDeleteObjectApp(
    _In_ HANDLE hobj
    );

int
WINAPI
NtGdiGetPath(
    _In_ HDC hdc,
    _Out_opt_ PPOINT pptlBuf,
    _Out_opt_ PBYTE pjTypes,
    _In_ int cptBuf
    );

HDC
WINAPI
NtGdiCreateCompatibleDC(
    _In_opt_ HDC hdc
    );

HBITMAP
WINAPI
NtGdiCreateDIBitmapInternal(
    _In_ HDC hdc,
    _In_ INT cx,
    _In_ INT cy,
    _In_ DWORD fInit,
    _In_opt_ PBYTE pjInit,
    _In_opt_ PBITMAPINFO pbmi,
    _In_ DWORD iUsage,
    _In_ UINT cjMaxInitInfo,
    _In_ UINT cjMaxBits,
    _In_ FLONG f,
    _In_ HANDLE hcmXform
    );

HBITMAP
WINAPI
NtGdiCreateDIBSection(
    _In_opt_ HDC hdc,
    _In_opt_ HANDLE hSectionApp,
    _In_ DWORD dwOffset,
    _In_opt_ PBITMAPINFO pbmi,
    _In_ DWORD iUsage,
    _In_ UINT cjHeader,
    _In_ FLONG fl,
    _In_ ULONG_PTR dwColorSpace,
    _Out_ PPVOID ppvBits
    );

HBRUSH
WINAPI
NtGdiCreateSolidBrush(
    _In_ COLORREF cr,
    _In_opt_ HBRUSH hbr
    );

HBRUSH
WINAPI
NtGdiCreateDIBBrush(
    _In_ PVOID pv,
    _In_ FLONG fl,
    _In_ UINT  cj,
    _In_ BOOL  b8X8,
    _In_ BOOL bPen,
    _In_ PVOID pClient
    );

HBRUSH
WINAPI
NtGdiCreatePatternBrushInternal(
    _In_ HBITMAP hbm,
    _In_ BOOL bPen,
    _In_ BOOL b8X8
    );

HBRUSH
WINAPI
NtGdiCreateHatchBrushInternal(
    _In_ ULONG ulStyle,
    _In_ COLORREF clrr,
    _In_ BOOL bPen
    );

HPEN
WINAPI
NtGdiExtCreatePen(
    _In_ ULONG flPenStyle,
    _In_ ULONG ulWidth,
    _In_ ULONG iBrushStyle,
    _In_ ULONG ulColor,
    _In_ ULONG_PTR lClientHatch,
    _In_ ULONG_PTR lHatch,
    _In_ ULONG cstyle,
    _In_opt_ PULONG pulStyle,
    _In_ ULONG cjDIB,
    _In_ BOOL bOldStylePen,
    _In_opt_ HBRUSH hbrush
    );

HRGN
WINAPI
NtGdiCreateEllipticRgn(
    _In_ int xLeft,
    _In_ int yTop,
    _In_ int xRight,
    _In_ int yBottom
    );

HRGN
WINAPI
NtGdiCreateRoundRectRgn(
    _In_ int xLeft,
    _In_ int yTop,
    _In_ int xRight,
    _In_ int yBottom,
    _In_ int xWidth,
    _In_ int yHeight
    );

HANDLE
WINAPI
NtGdiCreateServerMetaFile(
    _In_ DWORD iType,
    _In_ ULONG cjData,
    _In_ PBYTE pjData,
    _In_ DWORD mm,
    _In_ DWORD xExt,
    _In_ DWORD yExt
    );

HRGN
WINAPI
NtGdiExtCreateRegion(
    _In_opt_ PXFORM px,
    _In_ DWORD cj,
    _In_ PRGNDATA prgn
    );

ULONG
WINAPI
NtGdiMakeFontDir(
    _In_ FLONG flEmbed,
    _Out_ PBYTE pjFontDir,
    _In_ UINT cjFontDir,
    _In_ PWSTR pwszPathname,
    _In_ UINT cjPathname
    );

BOOL
WINAPI
NtGdiPolyDraw(
    _In_ HDC hdc,
    _In_ PPOINT ppt,
    _In_ PBYTE pjAttr,
    _In_ ULONG cpt
    );

BOOL
WINAPI
NtGdiPolyTextOutW(
    _In_ HDC hdc,
    _In_ PPOLYTEXTW pptw,
    _In_ UINT cStr,
    _In_ DWORD dwCodePage
    );

ULONG
WINAPI
NtGdiGetServerMetaFileBits(
    _In_ HANDLE hmo,
    _In_ ULONG cjData,
    _Out_opt_ PBYTE pjData,
    _Out_ PDWORD piType,
    _Out_ PDWORD pmm,
    _Out_ PDWORD pxExt,
    _Out_ PDWORD pyExt
    );

BOOL
WINAPI
NtGdiEqualRgn(
    _In_ HRGN hrgn1,
    _In_ HRGN hrgn2
    );

BOOL
WINAPI
NtGdiGetBitmapDimension(
    _In_ HBITMAP hbm,
    _Out_ PSIZE psize
    );

UINT
WINAPI
NtGdiGetNearestPaletteIndex(
    _In_ HPALETTE hpal,
    _In_ COLORREF crColor
    );

BOOL
WINAPI
NtGdiPtVisible(
    _In_ HDC hdc,
    _In_ int x,
    _In_ int y
    );

BOOL
WINAPI
NtGdiRectVisible(
    _In_ HDC hdc,
    _In_ PRECT prc
    );

BOOL
WINAPI
NtGdiRemoveFontResourceW(
    _In_ PWCHAR pwszFiles,
    _In_ ULONG cwc,
    _In_ ULONG cFiles,
    _In_ ULONG fl,
    _In_ DWORD dwPidTid,
    _In_opt_ PDESIGNVECTOR pdv
    );

BOOL
WINAPI
NtGdiResizePalette(
    _In_ HPALETTE hpal,
    _In_ UINT cEntry
    );

BOOL
WINAPI
NtGdiSetBitmapDimension(
    _In_ HBITMAP hbm,
    _In_ int cx,
    _In_ int cy,
    _Out_opt_ PSIZE psizeOut
    );

int
WINAPI
NtGdiOffsetClipRgn(
    _In_ HDC hdc,
    _In_ int x,
    _In_ int y
    );

int
WINAPI
NtGdiSetMetaRgn(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiSetTextJustification(
    _In_ HDC hdc,
    _In_ int lBreakExtra,
    _In_ int cBreak
    );

int
WINAPI
NtGdiGetAppClipBox(
    _In_ HDC hdc,
    _Out_ PRECT prc
    );

BOOL
WINAPI
NtGdiGetTextExtentExW(
    _In_ HDC hdc,
    _In_opt_ PWSTR pwsz,
    _In_ ULONG cwc,
    _In_ ULONG dxMax,
    _Out_opt_ PULONG pcCh,   // range
    _Out_opt_ PULONG pdxOut,
    _Out_ PSIZE psize,
    _In_ FLONG fl
    );

BOOL
WINAPI
NtGdiGetCharABCWidthsW(
    _In_ HDC hdc,
    _In_ UINT wchFirst,
    _In_ ULONG cwch,
    _In_opt_ PWCHAR pwch,
    _In_ FLONG fl,
    _Out_ PVOID pvBuf
    );

DWORD
WINAPI
NtGdiGetCharacterPlacementW(
    _In_ HDC hdc,
    _In_ PWSTR pwsz,
    _In_ int nCount,
    _In_ int nMaxExtent,
    _Inout_ PGCP_RESULTSW pgcpw,
    _In_ DWORD dwFlags
    );

BOOL
WINAPI
NtGdiAngleArc(
    _In_ HDC hdc,
    _In_ int x,
    _In_ int y,
    _In_ DWORD dwRadius,
    _In_ DWORD dwStartAngle,
    _In_ DWORD dwSweepAngle
    );

BOOL
WINAPI
NtGdiBeginPath(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiSelectClipPath(
    _In_ HDC hdc,
    _In_ int iMode
    );

BOOL
WINAPI
NtGdiCloseFigure(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiEndPath(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiAbortPath(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiFillPath(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiStrokeAndFillPath(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiStrokePath(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiWidenPath(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiFlattenPath(
    _In_ HDC hdc
    );

HRGN
WINAPI
NtGdiPathToRegion(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiSetMiterLimit(
    _In_ HDC hdc,
    _In_ DWORD dwNew,
    _Inout_opt_ PDWORD pdwOut
    );

BOOL
WINAPI
NtGdiSetFontXform(
    _In_ HDC hdc,
    _In_ DWORD dwxScale,
    _In_ DWORD dwyScale
    );

BOOL
WINAPI
NtGdiGetMiterLimit(
    _In_ HDC hdc,
    _Out_ PDWORD pdwOut
    );

BOOL
WINAPI
NtGdiEllipse(
    _In_ HDC hdc,
    _In_ int xLeft,
    _In_ int yTop,
    _In_ int xRight,
    _In_ int yBottom
    );

BOOL
WINAPI
NtGdiRectangle(
    _In_ HDC hdc,
    _In_ int xLeft,
    _In_ int yTop,
    _In_ int xRight,
    _In_ int yBottom
    );

BOOL
WINAPI
NtGdiRoundRect(
    _In_ HDC hdc,
    _In_ int x1,
    _In_ int y1,
    _In_ int x2,
    _In_ int y2,
    _In_ int x3,
    _In_ int y3
    );

BOOL
WINAPI
NtGdiPlgBlt(
    _In_ HDC hdcTrg,
    _In_ PPOINT pptlTrg,
    _In_ HDC hdcSrc,
    _In_ int xSrc,
    _In_ int ySrc,
    _In_ int cxSrc,
    _In_ int cySrc,
    _In_opt_ HBITMAP hbmMask,
    _In_ int xMask,
    _In_ int yMask,
    _In_ DWORD crBackColor
    );

BOOL
WINAPI
NtGdiMaskBlt(
    _In_ HDC hdc,
    _In_ int xDst,
    _In_ int yDst,
    _In_ int cx,
    _In_ int cy,
    _In_ HDC hdcSrc,
    _In_ int xSrc,
    _In_ int ySrc,
    _In_ HBITMAP hbmMask,
    _In_ int xMask,
    _In_ int yMask,
    _In_ DWORD dwRop4,
    _In_ DWORD crBackColor
    );

BOOL
WINAPI
NtGdiExtFloodFill(
    _In_ HDC hdc,
    _In_ INT x,
    _In_ INT y,
    _In_ COLORREF crColor,
    _In_ UINT iFillType
    );

BOOL
WINAPI
NtGdiFillRgn(
    _In_ HDC hdc,
    _In_ HRGN hrgn,
    _In_ HBRUSH hbrush
    );

BOOL
WINAPI
NtGdiFrameRgn(
    _In_ HDC hdc,
    _In_ HRGN hrgn,
    _In_ HBRUSH hbrush,
    _In_ int xWidth,
    _In_ int yHeight
    );

COLORREF
WINAPI
NtGdiSetPixel(
    _In_ HDC hdcDst,
    _In_ int x,
    _In_ int y,
    _In_ COLORREF crColor
    );

DWORD
WINAPI
NtGdiGetPixel(
    _In_ HDC hdc,
    _In_ int x,
    _In_ int y
    );

BOOL
WINAPI
NtGdiStartPage(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiEndPage(
    _In_ HDC hdc
    );

int
WINAPI
NtGdiStartDoc(
    _In_ HDC hdc,
    _In_ PDOCINFOW pdi,
    _Out_ PBOOL pbBanding,
    _In_ INT iJob
    );

BOOL
WINAPI
NtGdiEndDoc(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiAbortDoc(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiUpdateColors(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiGetCharWidthW(
    _In_ HDC hdc,
    _In_ UINT wcFirst,
    _In_ UINT cwc,
    _In_opt_ PWCHAR pwc,
    _In_ FLONG fl,
    _Out_ PVOID pvBuf
    );

BOOL
WINAPI
NtGdiGetCharWidthInfo(
    _In_ HDC hdc,
    _Out_ PCHWIDTHINFO pChWidthInfo
    );

int
WINAPI
NtGdiDrawEscape(
    _In_ HDC hdc,
    _In_ int iEsc,
    _In_ int cjIn,
    _In_opt_ PSTR pjIn
    );

int
WINAPI
NtGdiExtEscape(
    _In_opt_ HDC hdc,
    _In_opt_ PWCHAR pDriver,
    _In_ int nDriver,
    _In_ int iEsc,
    _In_ int cjIn,
    _In_opt_ PSTR pjIn,
    _In_ int cjOut,
    _Out_opt_ PSTR pjOut
    );

ULONG
WINAPI
NtGdiGetFontData(
    _In_ HDC hdc,
    _In_ DWORD dwTable,
    _In_ DWORD dwOffset,
    _Out_opt_ PVOID pvBuf,
    _In_ ULONG cjBuf
    );

DWORD
WINAPI
NtGdiGetFontFileData(
    _In_                UINT           uFileCollectionID,
    _In_                UINT           uFileIndex,
    _In_                PULONGLONG pullFileOffset,
    _Out_ PVOID pBuffer,
    _In_                SIZE_T         cbSize
    );

DWORD
WINAPI
NtGdiGetFontFileInfo(
    _In_                UINT              uFileCollectionID,
    _In_                UINT              uFileIndex,
    _Out_ PFONT_FILE_INFO pfi,
    _In_                SIZE_T            cbSize,
    _Out_opt_            PSIZE_T pcbActualSize
    );

ULONG
WINAPI
NtGdiGetGlyphOutline(
    _In_ HDC hdc,
    _In_ WCHAR wch,
    _In_ UINT iFormat,
    _Out_ PGLYPHMETRICS pgm,
    _In_ ULONG cjBuf,
    _Out_opt_ PVOID pvBuf,
    _In_ PMAT2 pmat2,
    _In_ BOOL bIgnoreRotation
    );

BOOL
WINAPI
NtGdiGetETM(
    _In_ HDC hdc,
    _Out_opt_ PEXTTEXTMETRIC petm
    );

BOOL
WINAPI
NtGdiGetRasterizerCaps(
    _Out_ PRASTERIZER_STATUS praststat,
    _In_ ULONG cjBytes
    );

ULONG
WINAPI
NtGdiGetKerningPairs(
    _In_ HDC hdc,
    _In_ ULONG cPairs,
    _Out_opt_ PKERNINGPAIR pkpDst
    );

BOOL
WINAPI
NtGdiMonoBitmap(
    _In_ HBITMAP hbm
    );

HBITMAP
WINAPI
NtGdiGetObjectBitmapHandle(
    _In_ HBRUSH hbr,
    _Out_ PUINT piUsage
    );

ULONG
WINAPI
NtGdiEnumObjects(
    _In_ HDC hdc,
    _In_ int iObjectType,
    _In_ ULONG cjBuf,
    _Out_opt_ PVOID pvBuf
    );



BOOL
WINAPI
NtGdiResetDC(
    _In_ HDC hdc,
    _In_ PDEVMODEW pdm,
    _Out_ PBOOL pbBanding,
    _In_opt_ PDRIVER_INFO_2W pDriverInfo2,
    _Out_ PVOID ppUMdhpdev
    );

DWORD
WINAPI
NtGdiSetBoundsRect(
    _In_ HDC hdc,
    _In_ PRECT prc,
    _In_ DWORD f
    );

BOOL
WINAPI
NtGdiGetColorAdjustment(
    _In_ HDC hdc,
    _Out_ PCOLORADJUSTMENT pcaOut
    );

BOOL
WINAPI
NtGdiSetColorAdjustment(
    _In_ HDC hdc,
    _In_ PCOLORADJUSTMENT pca
    );

BOOL
WINAPI
NtGdiCancelDC(
    _In_ HDC hdc
    );


HDC
WINAPI
NtGdiOpenDCW(
    _In_opt_ PUNICODE_STRING pustrDevice,
    _In_ PDEVMODEW pdm,
    _In_ PUNICODE_STRING pustrLogAddr,
    _In_ ULONG iType,
    _In_ BOOL bDisplay,
    _In_opt_ HANDLE hspool,
    _In_opt_ PDRIVER_INFO_2W pDriverInfo2,
    _Out_ PVOID pUMdhpdev
    );

BOOL
WINAPI
NtGdiGetDCDword(
    _In_ HDC hdc,
    _In_ UINT u,
    _Out_ PDWORD Result
    );

BOOL
WINAPI
NtGdiGetDCPoint(
    _In_ HDC hdc,
    _In_ UINT iPoint,
    _Out_ PPOINTL pptOut
    );

BOOL
WINAPI
NtGdiScaleViewportExtEx(
    _In_ HDC hdc,
    _In_ int xNum,
    _In_ int xDenom,
    _In_ int yNum,
    _In_ int yDenom,
    _Out_opt_ PSIZE pszOut
    );

BOOL
WINAPI
NtGdiScaleWindowExtEx(
    _In_ HDC hdc,
    _In_ int xNum,
    _In_ int xDenom,
    _In_ int yNum,
    _In_ int yDenom,
    _Out_opt_ PSIZE pszOut
    );

BOOL
WINAPI
NtGdiSetVirtualResolution(
    _In_ HDC hdc,
    _In_ int cxVirtualDevicePixel,
    _In_ int cyVirtualDevicePixel,
    _In_ int cxVirtualDeviceMm,
    _In_ int cyVirtualDeviceMm
    );

BOOL
WINAPI
NtGdiSetSizeDevice(
    _In_ HDC hdc,
    _In_ int cxVirtualDevice,
    _In_ int cyVirtualDevice
    );

BOOL
WINAPI
NtGdiGetTransform(
    _In_ HDC hdc,
    _In_ DWORD iXform,
    _Out_ PXFORM pxf
    );

BOOL
WINAPI
NtGdiModifyWorldTransform(
    _In_ HDC hdc,
    _In_opt_ PXFORM pxf,
    _In_ DWORD iXform
    );

BOOL
WINAPI
NtGdiCombineTransform(
    _Out_ PXFORM pxfDst,
    _In_ PXFORM pxfSrc1,
    _In_ PXFORM pxfSrc2
    );

BOOL
WINAPI
NtGdiTransformPoints(
    _In_ HDC hdc,
    _In_ PPOINT pptIn,
    _Out_ PPOINT pptOut,
    _In_ int c,
    _In_ int iMode
    );

LONG
WINAPI
NtGdiConvertMetafileRect(
    _In_ HDC hdc,
    _Inout_ PRECTL prect
    );

int
WINAPI
NtGdiGetTextCharsetInfo(
    _In_ HDC hdc,
    _Out_opt_ PFONTSIGNATURE pSig,
    _In_ DWORD dwFlags
    );


BOOL
WINAPI
NtGdiDoBanding(
    _In_ HDC hdc,
    _In_ BOOL bStart,
    _Out_ PPOINTL pptl,
    _Out_ PSIZE pSize
    );

ULONG
WINAPI
NtGdiGetPerBandInfo(
    _In_ HDC hdc,
    _Inout_ PPERBANDINFO ppbi
    );


NTSTATUS
WINAPI
NtGdiGetStats(
    _In_ HANDLE hProcess,
    _In_ int iIndex,
    _In_ int iPidType,
    _Out_ PVOID pResults,
    _In_ UINT cjResultSize
    );

BOOL
WINAPI
NtGdiSetMagicColors(
    _In_ HDC hdc,
    _In_ PALETTEENTRY peMagic,
    _In_ ULONG Index
    );

HBRUSH
WINAPI
NtGdiSelectBrush(
    _In_ HDC hdc,
    _In_ HBRUSH hbrush
    );

HPEN
WINAPI
NtGdiSelectPen(
    _In_ HDC hdc,
    _In_ HPEN hpen
    );

HBITMAP
WINAPI
NtGdiSelectBitmap(
    _In_ HDC hdc,
    _In_ HBITMAP hbm
    );

HFONT
WINAPI
NtGdiSelectFont(
    _In_ HDC hdc,
    _In_ HFONT hf
    );

int
WINAPI
NtGdiExtSelectClipRgn(
    _In_    HDC hdc,
    _In_opt_ HRGN hrgn,
    _In_    int iMode
    );

HPEN
WINAPI
NtGdiCreatePen(
    _In_ int iPenStyle,
    _In_ int iPenWidth,
    _In_ COLORREF cr,
    _In_opt_ HBRUSH hbr
    );

BOOL
WINAPI
NtGdiBitBlt(
    _In_ HDC hdcDst,
    _In_ int x,
    _In_ int y,
    _In_ int cx,
    _In_ int cy,
    _In_opt_ HDC hdcSrc,
    _In_ int xSrc,
    _In_ int ySrc,
    _In_ DWORD rop4,
    _In_ DWORD crBackColor,
    _In_ FLONG fl
    );

BOOL
WINAPI
NtGdiTileBitBlt(
    _In_ HDC hdcDst,
    _In_ PRECTL prectDst,
    _In_ HDC hdcSrc,
    _In_ PRECTL prectSrc,
    _In_ PPOINTL pptlOrigin,
    _In_ DWORD rop4,
    _In_ DWORD crBackColor
    );

BOOL
WINAPI
NtGdiTransparentBlt(
    _In_ HDC hdcDst,
    _In_ int xDst,
    _In_ int yDst,
    _In_ int cxDst,
    _In_ int cyDst,
    _In_ HDC hdcSrc,
    _In_ int xSrc,
    _In_ int ySrc,
    _In_ int cxSrc,
    _In_ int cySrc,
    _In_ COLORREF TransColor
    );

BOOL
WINAPI
NtGdiGetTextExtent(
    _In_ HDC hdc,
    _In_ PWSTR pwsz,
    _In_ int cwc,
    _Out_ PSIZE psize,
    _In_ UINT flOpts
    );

BOOL
WINAPI
NtGdiGetTextMetricsW(
    _In_ HDC hdc,
    _Out_ PTMW_INTERNAL ptm,
    _In_ ULONG cj
    );

int
WINAPI
NtGdiGetTextFaceW(
    _In_ HDC hdc,
    _In_ int cChar,
    _Out_opt_ PWSTR pszOut,
    _In_ BOOL bAliasName
    );

int
WINAPI
NtGdiGetRandomRgn(
    _In_ HDC hdc,
    _In_ HRGN hrgn,
    _In_ int iRgn
    );

BOOL
WINAPI
NtGdiExtTextOutW(
    _In_ HDC hdc,
    _In_ int x,
    _In_ int y,
    _In_ UINT flOpts,
    _In_opt_ PRECT prcl,
    _In_opt_ PWSTR pwsz,
    _In_ int cwc,
    _In_opt_ PINT pdx,
    _In_ DWORD dwCodePage
    );

int
WINAPI
NtGdiIntersectClipRect(
    _In_ HDC hdc,
    _In_ int xLeft,
    _In_ int yTop,
    _In_ int xRight,
    _In_ int yBottom
    );

HRGN
WINAPI
NtGdiCreateRectRgn(
    _In_ int xLeft,
    _In_ int yTop,
    _In_ int xRight,
    _In_ int yBottom
    );

BOOL
WINAPI
NtGdiPatBlt(
    _In_ HDC hdcDst,
    _In_ int x,
    _In_ int y,
    _In_ int cx,
    _In_ int cy,
    _In_ DWORD rop4
    );

BOOL
WINAPI
NtGdiPolyPatBlt(
    _In_ HDC hdc,
    _In_ DWORD rop4,
    _In_ PPOLYPATBLT pPoly,
    _In_ DWORD Count,
    _In_ DWORD Mode
    );

BOOL
WINAPI
NtGdiUnrealizeObject(
    _In_ HANDLE h
    );

HANDLE
WINAPI
NtGdiGetStockObject(
    _In_ int iObject
    );

HBITMAP
WINAPI
NtGdiCreateCompatibleBitmap(
    _In_ HDC hdc,
    _In_ int cx,
    _In_ int cy
    );

HBITMAP
WINAPI
NtGdiCreateBitmapFromDxSurface(
    _In_ HDC hdc,
    _In_ UINT uiWidth,
    _In_ UINT uiHeight,
    _In_ DWORD Format,
    _In_opt_ HANDLE hDxSharedSurface
    );

BOOL
WINAPI
NtGdiBeginGdiRendering(
    _In_ HBITMAP hbm,
    _In_ BOOL bDiscard
    );

BOOL
WINAPI
NtGdiEndGdiRendering(
    _In_ HBITMAP hbm,
    _In_ BOOL bDiscard,
    _Out_ PBOOL pbDeviceRemoved
    );

BOOL
WINAPI
NtGdiLineTo(
    _In_ HDC hdc,
    _In_ int x,
    _In_ int y
    );

BOOL
WINAPI
NtGdiMoveTo(
    _In_ HDC hdc,
    _In_ int x,
    _In_ int y,
    _Out_opt_ PPOINT pptOut
    );

int
WINAPI
NtGdiExtGetObjectW(
    _In_ HANDLE h,
    _In_ int cj,
    _Out_opt_ PVOID pvOut
    );

int
WINAPI
NtGdiGetDeviceCaps(
    _In_ HDC hdc,
    _In_ int i
    );

BOOL
WINAPI
NtGdiGetDeviceCapsAll (
    _In_opt_ HDC hdc,
    _Out_ PDEVCAPS pDevCaps
    );

BOOL
WINAPI
NtGdiStretchBlt(
    _In_ HDC hdcDst,
    _In_ int xDst,
    _In_ int yDst,
    _In_ int cxDst,
    _In_ int cyDst,
    _In_opt_ HDC hdcSrc,
    _In_ int xSrc,
    _In_ int ySrc,
    _In_ int cxSrc,
    _In_ int cySrc,
    _In_ DWORD dwRop,
    _In_ DWORD dwBackColor
    );

BOOL
WINAPI
NtGdiSetBrushOrg(
    _In_ HDC hdc,
    _In_ int x,
    _In_ int y,
    _Out_ PPOINT pptOut
    );

HBITMAP
WINAPI
NtGdiCreateBitmap(
    _In_ int cx,
    _In_ int cy,
    _In_ UINT cPlanes,
    _In_ UINT cBPP,
    _In_opt_ PBYTE pjInit
    );

HPALETTE
WINAPI
NtGdiCreateHalftonePalette(
    _In_ HDC hdc
    );

BOOL
WINAPI
NtGdiRestoreDC(
    _In_ HDC hdc,
    _In_ int iLevel
    );

int
WINAPI
NtGdiExcludeClipRect(
    _In_ HDC hdc,
    _In_ int xLeft,
    _In_ int yTop,
    _In_ int xRight,
    _In_ int yBottom
    );

int
WINAPI
NtGdiSaveDC(
    _In_ HDC hdc
    );

int
WINAPI
NtGdiCombineRgn(
    _In_ HRGN hrgnDst,
    _In_ HRGN hrgnSrc1,
    _In_ HRGN hrgnSrc2,
    _In_ int iMode
    );

BOOL
WINAPI
NtGdiSetRectRgn(
    _In_ HRGN hrgn,
    _In_ int xLeft,
    _In_ int yTop,
    _In_ int xRight,
    _In_ int yBottom
    );

LONG
WINAPI
NtGdiSetBitmapBits(
    _In_ HBITMAP hbm,
    _In_ ULONG cj,
    _In_ PBYTE pjInit
    );

int
WINAPI
NtGdiGetDIBitsInternal(
    _In_ HDC hdc,
    _In_ HBITMAP hbm,
    _In_ UINT iStartScan,
    _In_ UINT cScans,
    _Out_opt_ PBYTE pBits,
    _Inout_ PBITMAPINFO pbmi,
    _In_ UINT iUsage,
    _In_ UINT cjMaxBits,
    _In_ UINT cjMaxInfo
    );

int
WINAPI
NtGdiOffsetRgn(
    _In_ HRGN hrgn,
    _In_ int cx,
    _In_ int cy
    );

int
WINAPI
NtGdiGetRgnBox(
    _In_ HRGN hrgn,
    _Out_ PRECT prcOut
    );

BOOL
WINAPI
NtGdiRectInRegion(
    _In_ HRGN hrgn,
    _Inout_ PRECT prcl
    );

DWORD
WINAPI
NtGdiGetBoundsRect(
    _In_ HDC hdc,
    _Out_ PRECT prc,
    _In_ DWORD f
    );

BOOL
WINAPI
NtGdiPtInRegion(
    _In_ HRGN hrgn,
    _In_ int x,
    _In_ int y
    );

COLORREF
WINAPI
NtGdiGetNearestColor(
    _In_ HDC hdc,
    _In_ COLORREF cr
    );

UINT
WINAPI
NtGdiGetSystemPaletteUse(
    _In_ HDC hdc
    );

UINT
WINAPI
NtGdiSetSystemPaletteUse(
    _In_ HDC hdc,
    _In_ UINT ui
    );

DWORD
WINAPI
NtGdiGetRegionData(
    _In_ HRGN hrgn,
    _In_ DWORD nCount,
    _Out_opt_ PRGNDATA pRgnData
    );

BOOL
WINAPI
NtGdiInvertRgn(
    _In_ HDC hdc,
    _In_ HRGN hrgn
    );



int
WINAPI
NtGdiAddFontResourceW(
    _In_ PWCHAR pwszFiles,
    _In_ ULONG cwc,
    _In_ ULONG cFiles,
    _In_ FLONG f,
    _In_ DWORD dwPidTid,
    _In_opt_ PDESIGNVECTOR pdv
    );

HFONT
WINAPI
NtGdiHfontCreate(
    _In_ PENUMLOGFONTEXDVW pelfw,
    _In_ ULONG cjElfw,
    _In_ LFTYPE lft,
    _In_ FLONG  fl,
    _In_ PVOID pvCliData
    );

HFONT
WINAPI
NtGdiHfontCreate(
    _In_ PEXTLOGFONTW pelfw,
    _In_ ULONG cjElfw,
    _In_ LFTYPE lft,
    _In_ FLONG fl,
    _In_ PVOID pvCliData
    );


ULONG
WINAPI
NtGdiSetFontEnumeration(
    _In_ ULONG ulType
    );

BOOL
WINAPI
NtGdiEnumFonts(
    _In_ HDC hdc,
    _In_ ULONG iEnumType,
    _In_ FLONG flWin31Compat,
    _In_ ULONG cchFaceName,
    _In_opt_ PCWSTR pwszFaceName,
    _In_ ULONG lfCharSet,
    _Inout_ PULONG pulCount,
    _Out_opt_ PVOID pvUserModeBuffer
    );


INT
WINAPI
NtGdiQueryFonts(
    _Out_ PUNIVERSAL_FONT_ID pufiFontList,
    _In_ ULONG nBufferSize,
    _Out_ PLARGE_INTEGER pTimeStamp
    );



DWORD
NtGdiGetCharSet(
    _In_ HDC hdc
    );



BOOL
WINAPI
NtGdiEnableEudc(
    _In_ BOOL
    );

BOOL
WINAPI
NtGdiEudcLoadUnloadLink(
    _In_opt_ PCWSTR pBaseFaceName,
    _In_ UINT cwcBaseFaceName,
    _In_ PCWSTR pEudcFontPath,
    _In_ UINT cwcEudcFontPath,
    _In_ INT iPriority,
    _In_ INT iFontLinkType,
    _In_ BOOL bLoadLin
    );

UINT
WINAPI
NtGdiGetStringBitmapW(
    _In_ HDC hdc,
    _In_ PWSTR pwsz,
    _In_ UINT cwc,
    _In_ UINT cj,
    _Out_ PBYTE pSB
    );

ULONG
WINAPI
NtGdiGetEudcTimeStampEx(
    _In_opt_ PWSTR pBaseFaceName,
    _In_ ULONG cwcBaseFaceName,
    _In_ BOOL bSystemTimeStamp
    );

ULONG
WINAPI
NtGdiQueryFontAssocInfo(
    _In_ HDC hdc
    );


DWORD
NtGdiGetFontUnicodeRanges(
    _In_ HDC hdc,
    _Out_opt_ PGLYPHSET pgs
    );


BOOL
NtGdiGetRealizationInfo(
    _In_ HDC hdc,
    _Out_ PFONT_REALIZATION_INFO pri
    );


BOOL
NtGdiAddRemoteMMInstanceToDC(
    _In_ HDC hdc,
    _In_ PDOWNLOADDESIGNVECTOR pddv,
    _In_ ULONG cjDDV
    );



BOOL
WINAPI
NtGdiUnloadPrinterDriver(
    _In_ PWSTR pDriverName,
    _In_ ULONG cbDriverName
    );

BOOL
WINAPI
NtGdiEngAssociateSurface(
    _In_ HSURF hsurf,
    _In_ HDEV hdev,
    _In_ FLONG flHooks
    );

BOOL
WINAPI
NtGdiEngEraseSurface(
    _In_ PSURFOBJ pso,
    _In_ PRECTL prcl,
    _In_ ULONG iColor
    );

HBITMAP
WINAPI
NtGdiEngCreateBitmap(
    _In_ SIZEL sizl,
    _In_ LONG lWidth,
    _In_ ULONG iFormat,
    _In_ FLONG fl,
    _In_opt_ PVOID pvBits
    );

BOOL
WINAPI
NtGdiEngDeleteSurface(
    _In_ HSURF hsurf
    );

PSURFOBJ
WINAPI
NtGdiEngLockSurface(
    _In_ HSURF hsurf
    );

VOID
WINAPI
NtGdiEngUnlockSurface(
    _In_ PSURFOBJ 
    );

BOOL
WINAPI
NtGdiEngMarkBandingSurface(
    _In_ HSURF hsurf
    );

HSURF
WINAPI
NtGdiEngCreateDeviceSurface(
    _In_ DHSURF dhsurf,
    _In_ SIZEL sizl,
    _In_ ULONG iFormatCompat
    );

HBITMAP
WINAPI
NtGdiEngCreateDeviceBitmap(
    _In_ DHSURF dhsurf,
    _In_ SIZEL sizl,
    _In_ ULONG iFormatCompat
    );


BOOL
WINAPI
NtGdiEngCopyBits(
    _In_ PSURFOBJ psoDst,
    _In_ PSURFOBJ psoSrc,
    _In_opt_ PCLIPOBJ pco,
    _In_ PXLATEOBJ pxlo,
    _In_ PRECTL prclDst,
    _In_ PPOINTL pptlSrc
    );

BOOL
WINAPI
NtGdiEngStretchBlt(
    _In_ PSURFOBJ psoDest,
    _In_ PSURFOBJ psoSrc,
    _In_ PSURFOBJ psoMask,
    _In_ PCLIPOBJ pco,
    _In_ PXLATEOBJ pxlo,
    _In_ PCOLORADJUSTMENT pca,
    _In_ PPOINTL pptlHTOrg,
    _In_ PRECTL prclDest,
    _In_ PRECTL prclSrc,
    _In_ PPOINTL pptlMask,
    _In_ ULONG iMode
    );

BOOL
WINAPI
NtGdiEngBitBlt(
    _In_ PSURFOBJ psoDst,
    _In_ PSURFOBJ psoSrc,
    _In_ PSURFOBJ psoMask,
    _In_ PCLIPOBJ pco,
    _In_ PXLATEOBJ pxlo,
    _In_ PRECTL prclDst,
    _In_ PPOINTL pptlSrc,
    _In_ PPOINTL pptlMask,
    _In_ PBRUSHOBJ pbo,
    _In_ PPOINTL pptlBrush,
    _In_ ROP4 rop4
    );

BOOL
WINAPI
NtGdiEngPlgBlt(
    _In_ PSURFOBJ psoTrg,
    _In_ PSURFOBJ psoSrc,
    _In_opt_ PSURFOBJ psoMsk,
    _In_ PCLIPOBJ pco,
    _In_ PXLATEOBJ pxlo,
    _In_ PCOLORADJUSTMENT pca,
    _In_ PPOINTL pptlBrushOrg,
    _In_ PPOINTFIX pptfxDest,
    _In_ PRECTL prclSrc,
    _In_opt_ PPOINTL pptlMask,
    _In_ ULONG iMode
    );

HPALETTE
WINAPI
NtGdiEngCreatePalette(
    _In_ ULONG iMode,
    _In_ ULONG cColors,
    _In_ PULONG pulColors,
    _In_ FLONG flRed,
    _In_ FLONG flGreen,
    _In_ FLONG flBlue
    );

BOOL
WINAPI
NtGdiEngDeletePalette(
    _In_ HPALETTE hPal
    );

BOOL
WINAPI
NtGdiEngStrokePath(
    _In_ PSURFOBJ pso,
    _In_ PPATHOBJ ppo,
    _In_ PCLIPOBJ pco,
    _In_ PXFORMOBJ pxo,
    _In_ PBRUSHOBJ pbo,
    _In_ PPOINTL pptlBrushOrg,
    _In_ PLINEATTRS plineattrs,
    _In_ MIX mix
    );

BOOL
WINAPI
NtGdiEngFillPath(
    _In_ PSURFOBJ pso,
    _In_ PPATHOBJ ppo,
    _In_ PCLIPOBJ pco,
    _In_ PBRUSHOBJ pbo,
    _In_ PPOINTL pptlBrushOrg,
    _In_ MIX mix,
    _In_ FLONG flOptions
    );

BOOL
WINAPI
NtGdiEngStrokeAndFillPath(
    _In_ PSURFOBJ pso,
    _In_ PPATHOBJ ppo,
    _In_ PCLIPOBJ pco,
    _In_ PXFORMOBJ pxo,
    _In_ PBRUSHOBJ pboStroke,
    _In_ PLINEATTRS plineattrs,
    _In_ PBRUSHOBJ pboFill,
    _In_ PPOINTL pptlBrushOrg,
    _In_ MIX mix,
    _In_ FLONG flOptions
    );

BOOL
WINAPI
NtGdiEngPaint(
    _In_ PSURFOBJ pso,
    _In_ PCLIPOBJ pco,
    _In_ PBRUSHOBJ pbo,
    _In_ PPOINTL pptlBrushOrg,
    _In_ MIX mix
    );

BOOL
WINAPI
NtGdiEngLineTo(
    _In_ PSURFOBJ pso,
    _In_ PCLIPOBJ pco,
    _In_ PBRUSHOBJ pbo,
    _In_ LONG x1,
    _In_ LONG y1,
    _In_ LONG x2,
    _In_ LONG y2,
    _In_ PRECTL prclBounds,
    _In_ MIX mix
    );

BOOL
WINAPI
NtGdiEngAlphaBlend(
    _In_ PSURFOBJ psoDest,
    _In_ PSURFOBJ psoSrc,
    _In_ PCLIPOBJ pco,
    _In_ PXLATEOBJ pxlo,
    _In_ PRECTL prclDest,
    _In_ PRECTL prclSrc,
    _In_ PBLENDOBJ pBlendObj
    );

BOOL
WINAPI
NtGdiEngGradientFill(
    _In_ PSURFOBJ psoDest,
    _In_ PCLIPOBJ pco,
    _In_ PXLATEOBJ pxlo,
    _In_ PTRIVERTEX pVertex,
    _In_ ULONG nVertex,
    _In_ PVOID pMesh,
    _In_ ULONG nMesh,
    _In_ PRECTL prclExtents,
    _In_ PPOINTL pptlDitherOrg,
    _In_ ULONG ulMode
    );

BOOL
WINAPI
NtGdiEngTransparentBlt(
    _In_ PSURFOBJ psoDst,
    _In_ PSURFOBJ psoSrc,
    _In_ PCLIPOBJ pco,
    _In_ PXLATEOBJ pxlo,
    _In_ PRECTL prclDst,
    _In_ PRECTL prclSrc,
    _In_ ULONG iTransColor,
    _In_ ULONG ulReserved
    );

BOOL
WINAPI
NtGdiEngTextOut(
    _In_ PSURFOBJ pso,
    _In_ PSTROBJ pstro,
    _In_ PFONTOBJ pfo,
    _In_ PCLIPOBJ pco,
    _In_ PRECTL prclExtra,
    _In_ PRECTL prclOpaque,
    _In_ PBRUSHOBJ pboFore,
    _In_ PBRUSHOBJ pboOpaque,
    _In_ PPOINTL pptlOrg,
    _In_ MIX mix
    );

BOOL
WINAPI
NtGdiEngStretchBltROP(
    _In_ PSURFOBJ psoTrg,
    _In_ PSURFOBJ psoSrc,
    _In_ PSURFOBJ psoMask,
    _In_ PCLIPOBJ pco,
    _In_ PXLATEOBJ pxlo,
    _In_ PCOLORADJUSTMENT pca,
    _In_ PPOINTL pptlBrushOrg,
    _In_ PRECTL prclTrg,
    _In_ PRECTL prclSrc,
    _In_ PPOINTL pptlMask,
    _In_ ULONG iMode,
    _In_ PBRUSHOBJ pbo,
    _In_ ROP4 rop4
    );


ULONG
WINAPI
NtGdiXLATEOBJ_cGetPalette(
    _In_ PXLATEOBJ pxlo,
    _In_ ULONG iPal,
    _In_ ULONG cPal,
    _Out_ PULONG pPal
    );


ULONG
WINAPI
NtGdiCLIPOBJ_cEnumStart(
    _In_ PCLIPOBJ pco,
    _In_ BOOL bAll,
    _In_ ULONG iType,
    _In_ ULONG iDirection,
    _In_ ULONG cLimit
    );

BOOL
WINAPI
NtGdiCLIPOBJ_bEnum(
    _In_ PCLIPOBJ pco,
    _In_ ULONG cj,
    _Out_ PULONG pul
    );

PPATHOBJ
WINAPI
NtGdiCLIPOBJ_ppoGetPath(
    _In_ PCLIPOBJ pco
    );

PCLIPOBJ
WINAPI
NtGdiEngCreateClip();

VOID
WINAPI
NtGdiEngDeleteClip(
    _In_ PCLIPOBJ pco
    );

PVOID
WINAPI
NtGdiBRUSHOBJ_pvAllocRbrush(
    _In_ PBRUSHOBJ pbo,
    _In_ ULONG cj
    );

PVOID
WINAPI
NtGdiBRUSHOBJ_pvGetRbrush(
    _In_ PBRUSHOBJ pbo
    );

ULONG
WINAPI
NtGdiBRUSHOBJ_ulGetBrushColor(
    _In_ PBRUSHOBJ pbo
    );

HANDLE
WINAPI
NtGdiBRUSHOBJ_hGetColorTransform(
    _In_ PBRUSHOBJ pbo
    );

BOOL
WINAPI
NtGdiXFORMOBJ_bApplyXform(
    _In_ PXFORMOBJ pxo,
    _In_ ULONG iMode,
    _In_ ULONG cPoints,
    _In_ PPOINTL pvIn,
    _Out_ PPOINTL pvOut
    );

ULONG
WINAPI
NtGdiXFORMOBJ_iGetXform(
    _In_ PXFORMOBJ pxo,
    _Out_opt_ PXFORML pxform
    );

VOID
WINAPI
NtGdiFONTOBJ_vGetInfo(
    _In_ PFONTOBJ pfo,
    _In_ ULONG cjSize,
    _Out_ PFONTINFO pfi
    );

ULONG
WINAPI
NtGdiFONTOBJ_cGetGlyphs(
    _In_ PFONTOBJ pfo,
    _In_ ULONG iMode,
    _In_ ULONG cGlyph,
    _In_ PHGLYPH phg,
    _Out_ PPVOID ppvGlyph
    );

PXFORMOBJ
WINAPI
NtGdiFONTOBJ_pxoGetXform(
    _In_ PFONTOBJ pfo
    );

PIFIMETRICS
WINAPI
NtGdiFONTOBJ_pifi(
    _In_ PFONTOBJ pfo
    );

PFD_GLYPHSET
WINAPI
NtGdiFONTOBJ_pfdg(
    _In_ PFONTOBJ pfo
    );

ULONG
WINAPI
NtGdiFONTOBJ_cGetAllGlyphHandles(
    _In_ PFONTOBJ pfo,
    _Out_opt_ PHGLYPH phg
    );

PVOID
WINAPI
NtGdiFONTOBJ_pvTrueTypeFontFile(
    _In_ PFONTOBJ pfo,
    _Out_ PULONG pcjFile
    );

PFD_GLYPHATTR
WINAPI
NtGdiFONTOBJ_pQueryGlyphAttrs(
    _In_ PFONTOBJ pfo,
    _In_ ULONG iMode
    );

BOOL
WINAPI
NtGdiSTROBJ_bEnum(
    _In_ PSTROBJ pstro,
    _Out_ PULONG pc,
    _Out_ PPGLYPHPOS ppgpos
    );

BOOL
WINAPI
NtGdiSTROBJ_bEnumPositionsOnly(
    _In_ PSTROBJ pstro,
    _Out_ PULONG pc,
    _Out_ PPGLYPHPOS ppgpos
    );

VOID
WINAPI
NtGdiSTROBJ_vEnumStart(
    _In_ PSTROBJ pstro
    );

DWORD
WINAPI
NtGdiSTROBJ_dwGetCodePage(
    _In_ PSTROBJ pstro
    );

BOOL
WINAPI
NtGdiSTROBJ_bGetAdvanceWidths(
    _In_ PSTROBJ pstro,
    _In_ ULONG iFirst,
    _In_ ULONG c,
    _Out_ PPOINTQF pptqD
    );

PFD_GLYPHSET
WINAPI
NtGdiEngComputeGlyphSet(
    _In_ INT nCodePage,
    _In_ INT nFirstChar,
    _In_ INT cChars
    );

ULONG
WINAPI
NtGdiXLATEOBJ_iXlate(
    _In_ PXLATEOBJ pxlo,
    _In_ ULONG iColor
    );

HANDLE
WINAPI
NtGdiXLATEOBJ_hGetColorTransform(
    _In_ PXLATEOBJ pxlo
    );

VOID
WINAPI
NtGdiPATHOBJ_vGetBounds(
    _In_ PPATHOBJ ppo,
    _Out_ PRECTFX prectfx
    );

BOOL
WINAPI
NtGdiPATHOBJ_bEnum(
    _In_ PPATHOBJ ppo,
    _Out_ PPATHDATA ppd
    );

VOID
WINAPI
NtGdiPATHOBJ_vEnumStart(
    _In_ PPATHOBJ ppo
    );

VOID
WINAPI
NtGdiEngDeletePath(
    _In_ PPATHOBJ ppo
    );

VOID
WINAPI
NtGdiPATHOBJ_vEnumStartClipLines(
    _In_ PPATHOBJ ppo,
    _In_ PCLIPOBJ pco,
    _In_ PSURFOBJ pso,
    _In_ PLINEATTRS pla
    );

BOOL
WINAPI
NtGdiPATHOBJ_bEnumClipLines(
    _In_ PPATHOBJ ppo,
    _In_ ULONG cb,
    _Out_ PCLIPLINE pcl
    );


BOOL
WINAPI
NtGdiEngCheckAbort(
    _In_ PSURFOBJ pso
    );

DHPDEV
NtGdiGetDhpdev(
    _In_ HDEV hdev
    );


LONG
WINAPI
NtGdiHT_Get8BPPFormatPalette(
    _Out_opt_ PPALETTEENTRY pPaletteEntry,
    _In_ USHORT RedGamma,
    _In_ USHORT GreenGamma,
    _In_ USHORT BlueGamma
    );

LONG
WINAPI
NtGdiHT_Get8BPPMaskPalette(
    _Out_opt_ PPALETTEENTRY pPaletteEntry,
    _In_ BOOL Use8BPPMaskPal,
    _In_ BYTE CMYMask,
    _In_ USHORT RedGamma,
    _In_ USHORT GreenGamma,
    _In_ USHORT BlueGamma
    );

BOOL
NtGdiUpdateTransform(
    _In_ HDC hdc
    );

DWORD
WINAPI
NtGdiSetLayout(
    _In_ HDC hdc,
    _In_ LONG wox,
    _In_ DWORD dwLayout
    );

BOOL
WINAPI
NtGdiMirrorWindowOrg(
    _In_ HDC hdc
    );

LONG
WINAPI
NtGdiGetDeviceWidth(
    _In_ HDC hdc
    );


BOOL
NtGdiSetPUMPDOBJ(
    _In_opt_ HUMPD humpd,
    _In_ BOOL bStoreID,
    _Inout_opt_ PHUMPD phumpd,
    _Out_opt_ PBOOL pbWOW64
    );

BOOL
NtGdiBRUSHOBJ_DeleteRbrush(
    _In_opt_ PBRUSHOBJ pbo,
    _In_opt_ PBRUSHOBJ pboB
    );

BOOL
NtGdiUMPDEngFreeUserMem(
    _In_ PKERNEL_PVOID ppv
    );

HBITMAP
WINAPI
NtGdiSetBitmapAttributes(
    _In_ HBITMAP hbm,
    _In_ DWORD dwFlags
    );

HBITMAP
WINAPI
NtGdiClearBitmapAttributes(
    _In_ HBITMAP hbm,
    _In_ DWORD dwFlags
    );

HBRUSH
WINAPI
NtGdiSetBrushAttributes(
    _In_ HBRUSH hbm,
    _In_ DWORD dwFlags
    );

HBRUSH
WINAPI
NtGdiClearBrushAttributes(
    _In_ HBRUSH hbr,
    _In_ DWORD dwFlags
    );



BOOL
WINAPI
NtGdiDrawStream(
    _In_ HDC hdcDst,
    _In_ ULONG cjIn,
    _In_ PVOID pvIn
    );


BOOL
WINAPI
NtGdiMakeObjectXferable(
    _In_ HANDLE h,
    _In_ DWORD dwProcessId
    );

BOOL
WINAPI
NtGdiMakeObjectUnXferable(
    _In_ HANDLE h
    );


BOOL
NtGdiSfmGetNotificationTokens(
    _In_ UINT cBytes,
    _Out_ PUINT pNrOfTokensReturned,
    PVOID pTokenBuffer);

// "Private DWM interface"
BOOL
NtGdiSfmRegisterLogicalSurfaceForSignaling(
    _In_ HLSURF hlsurf,
    BOOL fSignalOnDirty);

// "Private DWM interface"
BOOL
NtGdiDwmGetHighColorMode(
    _Out_ PDXGI_FORMAT pdxgiFormat);

// "Private DWM interface"
BOOL
NtGdiDwmSetHighColorMode(
    _In_ DXGI_FORMAT dxgiFormat);

// "Private DWM interface"
HANDLE
NtGdiDwmCaptureScreen(
    _In_ PRECT prcCapture,
    _In_ DXGI_FORMAT dxgiFormat);

NTSTATUS
WINAPI
NtGdiDdCreateFullscreenSprite(
    _In_ HDC hdc,
    _In_ COLORREF crKey,
    _Out_ PHANDLE phSprite,
    _Out_ PHDC phdcSprite);

NTSTATUS
WINAPI
NtGdiDdNotifyFullscreenSpriteUpdate(
    _In_ HDC hdc,
    _In_ HANDLE hSprite);

NTSTATUS
WINAPI
NtGdiDdDestroyFullscreenSprite(
    _In_ HDC hdc,
    _In_ HANDLE hSprite);

ULONG
WINAPI
NtGdiDdQueryVisRgnUniqueness();


BOOL
WINAPI
NtGdiHLSurfGetInformation(
    _In_ HLSURF hLsurf,
    _In_ HLSURF_INFORMATION_CLASS InformationClass,
    _In_opt_ PVOID InformationBuffer,
    _Inout_ PULONG pulInformationLength    
    );


BOOL
WINAPI
NtGdiHLSurfSetInformation(
    _In_ HLSURF hLsurf,
    _In_ HLSURF_INFORMATION_CLASS InformationClass,
    _In_opt_ PVOID InformationBuffer,
    _In_ ULONG InformationLength    
    );

//[DirectX]
typedef HANDLE D3DKMT_HANDLE;

typedef PVOID PD3DKMT_ACQUIREKEYEDMUTEX;
typedef PVOID PD3DKMT_CHECKMONITORPOWERSTATE;
typedef PVOID PD3DKMT_CHECKOCCLUSION;
typedef PVOID PD3DKMT_CHECKSHAREDRESOURCEACCESS;
typedef PVOID PD3DKMT_CHECKVIDPNEXCLUSIVEOWNERSHIP;
typedef PVOID PD3DKMT_CLOSEADAPTER;
typedef PVOID PD3DKMT_CONFIGURESHAREDRESOURCE;
typedef PVOID PD3DKMT_CREATEALLOCATION;
typedef PVOID PD3DKMT_CREATECONTEXT;
typedef PVOID PD3DKMT_CREATEDCFROMMEMORY;
typedef PVOID PD3DKMT_CREATEDEVICE;
typedef PVOID PD3DKMT_CREATEKEYEDMUTEX;
typedef PVOID PD3DKMT_CREATEOVERLAY;
typedef PVOID PD3DKMT_CREATESYNCHRONIZATIONOBJECT2;
typedef PVOID PD3DKMT_DESTROYALLOCATION;
typedef PVOID PD3DKMT_DESTROYCONTEXT;
typedef PVOID PD3DKMT_DESTROYDCFROMMEMORY;
typedef PVOID PD3DKMT_DESTROYDEVICE;
typedef PVOID PD3DKMT_DESTROYKEYEDMUTEX;
typedef PVOID PD3DKMT_DESTROYOVERLAY;
typedef PVOID PD3DKMT_DESTROYSYNCHRONIZATIONOBJECT;
typedef PVOID PD3DKMT_ESCAPE;
typedef PVOID PD3DKMT_FLIPOVERLAY;
typedef PVOID PD3DKMT_GETCONTEXTSCHEDULINGPRIORITY;
typedef PVOID PD3DKMT_GETDEVICESTATE;
typedef PVOID PD3DKMT_GETDISPLAYMODELIST;
typedef PVOID PD3DKMT_GETMULTISAMPLEMETHODLIST;
typedef PVOID PD3DKMT_GETOVERLAYSTATE;
typedef PVOID PD3DKMT_GETPRESENTHISTORY;
typedef PVOID PD3DKMT_GETRUNTIMEDATA;
typedef PVOID PD3DKMT_GETSCANLINE;
typedef PVOID PD3DKMT_GETSHAREDPRIMARYHANDLE;
typedef PVOID PD3DKMT_INVALIDATEACTIVEVIDPN;
typedef PVOID PD3DKMT_LOCK;
typedef PVOID PD3DKMT_OPENADAPTERFROMDEVICENAME;
typedef PVOID PD3DKMT_OPENADAPTERFROMHDC;
typedef PVOID PD3DKMT_OPENKEYEDMUTEX;
typedef PVOID PD3DKMT_OPENRESOURCE;
typedef PVOID PD3DKMT_OPENSYNCHRONIZATIONOBJECT;
typedef PVOID PD3DKMT_POLLDISPLAYCHILDREN;
typedef PVOID PD3DKMT_PRESENT;
typedef PVOID PD3DKMT_QUERYADAPTERINFO;
typedef PVOID PD3DKMT_QUERYALLOCATIONRESIDENCY;
typedef PVOID PD3DKMT_QUERYRESOURCEINFO;
typedef PVOID PD3DKMT_RELEASEKEYEDMUTEX;
typedef PVOID PD3DKMT_RENDER;
typedef PVOID PD3DKMT_SCHEDULINGPRIORITYCLASS;
typedef PVOID PD3DKMT_SETALLOCATIONPRIORITY;
typedef PVOID PD3DKMT_SETCONTEXTSCHEDULINGPRIORITY;
typedef PVOID PD3DKMT_SETDISPLAYMODE;
typedef PVOID PD3DKMT_SETDISPLAYPRIVATEDRIVERFORMAT;
typedef PVOID PD3DKMT_SETGAMMARAMP;
typedef PVOID PD3DKMT_SETQUEUEDLIMIT;
typedef PVOID PD3DKMT_SETVIDPNSOURCEOWNER;
typedef PVOID PD3DKMT_SHAREDPRIMARYLOCKNOTIFICATION;
typedef PVOID PD3DKMT_SHAREDPRIMARYUNLOCKNOTIFICATION;
typedef PVOID PD3DKMT_SIGNALSYNCHRONIZATIONOBJECT2;
typedef PVOID PD3DKMT_UNLOCK;
typedef PVOID PD3DKMT_UPDATEOVERLAY;
typedef PVOID PD3DKMT_WAITFORIDLE;
typedef PVOID PD3DKMT_WAITFORSYNCHRONIZATIONOBJECT2;
typedef PVOID PD3DKMT_WAITFORVERTICALBLANKEVENT;
typedef PVOID PD3DKMT_QUERYSTATISTICS;

typedef ULONG D3DKMT_SCHEDULINGPRIORITYCLASS;

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIAcquireKeyedMutex(
    PD3DKMT_ACQUIREKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckExclusiveOwnership(
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckMonitorPowerState(
    PD3DKMT_CHECKMONITORPOWERSTATE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckOcclusion(
    PD3DKMT_CHECKOCCLUSION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckSharedResourceAccess(
    PD3DKMT_CHECKSHAREDRESOURCEACCESS pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckVidPnExclusiveOwnership(
    PD3DKMT_CHECKVIDPNEXCLUSIVEOWNERSHIP pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICloseAdapter(
    PD3DKMT_CLOSEADAPTER pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIConfigureSharedResource(
    PD3DKMT_CONFIGURESHAREDRESOURCE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateAllocation(
    PD3DKMT_CREATEALLOCATION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateContext(
    PD3DKMT_CREATECONTEXT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateDCFromMemory(
    PD3DKMT_CREATEDCFROMMEMORY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateDevice(
    PD3DKMT_CREATEDEVICE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateKeyedMutex(
    PD3DKMT_CREATEKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateOverlay(
    PD3DKMT_CREATEOVERLAY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateSynchronizationObject(
    PD3DKMT_CREATESYNCHRONIZATIONOBJECT2 pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyAllocation(
    PD3DKMT_DESTROYALLOCATION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyContext(
    PD3DKMT_DESTROYCONTEXT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyDCFromMemory(
    PD3DKMT_DESTROYDCFROMMEMORY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyDevice(
    PD3DKMT_DESTROYDEVICE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyKeyedMutex(
    PD3DKMT_DESTROYKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyOverlay(
    PD3DKMT_DESTROYOVERLAY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroySynchronizationObject(
    PD3DKMT_DESTROYSYNCHRONIZATIONOBJECT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIEscape(
    PD3DKMT_ESCAPE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIFlipOverlay(
    PD3DKMT_FLIPOVERLAY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetContextSchedulingPriority(
    PD3DKMT_GETCONTEXTSCHEDULINGPRIORITY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetDeviceState(
    PD3DKMT_GETDEVICESTATE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetDisplayModeList(
    PD3DKMT_GETDISPLAYMODELIST pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetMultisampleMethodList(
    PD3DKMT_GETMULTISAMPLEMETHODLIST pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetOverlayState(
    PD3DKMT_GETOVERLAYSTATE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetPresentHistory(
    PD3DKMT_GETPRESENTHISTORY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetPresentQueueEvent(
    D3DKMT_HANDLE hAdapter,
    PHANDLE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetProcessSchedulingPriorityClass(
    HANDLE hProcess,
    PD3DKMT_SCHEDULINGPRIORITYCLASS pPriority
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetRuntimeData(
    PD3DKMT_GETRUNTIMEDATA pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetScanLine(
    PD3DKMT_GETSCANLINE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetSharedPrimaryHandle(
    PD3DKMT_GETSHAREDPRIMARYHANDLE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIInvalidateActiveVidPn(
    PD3DKMT_INVALIDATEACTIVEVIDPN pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDILock(
    PD3DKMT_LOCK pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenAdapterFromDeviceName(
    PD3DKMT_OPENADAPTERFROMDEVICENAME pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenAdapterFromHdc(
    PD3DKMT_OPENADAPTERFROMHDC pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenKeyedMutex(
    PD3DKMT_OPENKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenResource(
    PD3DKMT_OPENRESOURCE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenSynchronizationObject(
    PD3DKMT_OPENSYNCHRONIZATIONOBJECT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIPollDisplayChildren(
    PD3DKMT_POLLDISPLAYCHILDREN pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIPresent(
    PD3DKMT_PRESENT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIQueryAdapterInfo(
    PD3DKMT_QUERYADAPTERINFO pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIQueryAllocationResidency(
    PD3DKMT_QUERYALLOCATIONRESIDENCY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIQueryResourceInfo(
    PD3DKMT_QUERYRESOURCEINFO pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIQueryStatistics(
    PD3DKMT_QUERYSTATISTICS pQueryStatistics
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIReleaseKeyedMutex(
    PD3DKMT_RELEASEKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIReleaseProcessVidPnSourceOwners(
    HANDLE hProcess
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIRender(
    PD3DKMT_RENDER pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetAllocationPriority(
    PD3DKMT_SETALLOCATIONPRIORITY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetContextSchedulingPriority(
    PD3DKMT_SETCONTEXTSCHEDULINGPRIORITY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetDisplayMode(
    PD3DKMT_SETDISPLAYMODE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetDisplayPrivateDriverFormat(
    PD3DKMT_SETDISPLAYPRIVATEDRIVERFORMAT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetGammaRamp(
    PD3DKMT_SETGAMMARAMP pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetProcessSchedulingPriorityClass(
    HANDLE hProcess,
    D3DKMT_SCHEDULINGPRIORITYCLASS Priority
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetQueuedLimit(
    PD3DKMT_SETQUEUEDLIMIT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetVidPnSourceOwner(
    PD3DKMT_SETVIDPNSOURCEOWNER pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISharedPrimaryLockNotification(
    PD3DKMT_SHAREDPRIMARYLOCKNOTIFICATION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISharedPrimaryUnLockNotification(
    PD3DKMT_SHAREDPRIMARYUNLOCKNOTIFICATION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISignalSynchronizationObject(
    PD3DKMT_SIGNALSYNCHRONIZATIONOBJECT2 pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIUnlock(
    PD3DKMT_UNLOCK pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIUpdateOverlay(
    PD3DKMT_UPDATEOVERLAY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIWaitForIdle(
    PD3DKMT_WAITFORIDLE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIWaitForSynchronizationObject(
    PD3DKMT_WAITFORSYNCHRONIZATIONOBJECT2 pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIWaitForVerticalBlankEvent(
    PD3DKMT_WAITFORVERTICALBLANKEVENT pData
    );


//[OPM]
NTSTATUS
NTAPI
NtGdiConfigureOPMProtectedOutput(
    _In_ OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _In_ PDXGKMDT_OPM_CONFIGURE_PARAMETERS pParameters,
    _In_ ULONG ulAdditionalParametersSize,
    _In_ PBYTE pbAdditionalParameters
    );

//[Windows2003]
BOOL
NTAPI
NtGdiConsoleTextOut(
    _In_ HDC hdc,
    _In_ PPOLYTEXTW Text,
    _In_ ULONG nItems,
    _In_ PRECTL Bounds
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiCreateOPMProtectedOutputs(
    _In_  PUNICODE_STRING pstrDeviceName,
    _In_  DXGKMDT_OPM_VIDEO_OUTPUT_SEMANTICS vos,
    _In_  DWORD dwOPMProtectedOutputArraySize,
    _Out_ PDWORD pdwNumOPMProtectedOutputsInArray,
    _Out_ POPM_PROTECTED_OUTPUT_HANDLE pohOPMProtectedOutputArray
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCIGetCapabilitiesString(
    _In_  HANDLE hMonitor,
    _Out_ PSTR pszString,
    _In_  DWORD dwLength
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCIGetCapabilitiesStringLength(
    _In_  HANDLE hMonitor,
    _Out_ PDWORD pdwLength
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCIGetTimingReport(
    _In_  HANDLE hMonitor,
    _Out_ LPMC_TIMING_REPORT pmtr
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCIGetVCPFeature(
    _In_      HANDLE hMonitor,
    _In_      DWORD dwVCPCode,
    _Out_opt_  LPMC_VCP_CODE_TYPE pvct,
    _Out_     PDWORD pdwCurrentValue,
    _Out_opt_  PDWORD pdwMaximumValue
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCISaveCurrentSettings(
    _In_ HANDLE hMonitor
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCISetVCPFeature(
    _In_ HANDLE hMonitor,
    _In_ DWORD dwVCPCode,
    _In_ DWORD dwNewValue
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiDestroyOPMProtectedOutput(
     _In_ OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput
    );

//[Monitor]
BOOL
NTAPI
NtGdiDestroyPhysicalMonitor(
    _In_ HANDLE hMonitor
    );

//[Window2003]
NTSTATUS
NTAPI
NtGdiEnumFontChunk(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Window2003]
NTSTATUS
NTAPI
NtGdiEnumFontClose(
    ULONG Unknown
    );

//[Window2003]
NTSTATUS
NTAPI
NtGdiEnumFontOpen(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Other]
NTSTATUS
NTAPI
NtGdiFullscreenControl(
    _In_ ULONG Function,
    _In_ PVOID Input,
    _In_ ULONG InputLength,
    _Out_opt_ PVOID Output,
    _In_ ULONG OutputLength
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetCOPPCompatibleOPMInformation(
    _In_  OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _In_  PDXGKMDT_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS pParameters,
    _Out_ PDXGKMDT_OPM_REQUESTED_INFORMATION pRequestedInformation
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetCertificate(
    _In_  PUNICODE_STRING pstrDeviceName,
    _In_  DXGKMDT_CERTIFICATE_TYPE ctPVPCertificateType,
    _Out_ PBYTE pbCertificate,
    _Out_ ULONG ulCertificateLength
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetCertificateSize(
    _In_  PUNICODE_STRING  pstrDeviceName,
    _In_  DXGKMDT_CERTIFICATE_TYPE ctPVPCertificateType,
    _Out_ PULONG pulCertificateLength
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiGetNumberOfPhysicalMonitors(
    _In_  PUNICODE_STRING pstrDeviceName,
    _Out_ PDWORD pdwNumberOfPhysicalMonitors
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetOPMInformation(
    _In_  OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _In_  PDXGKMDT_OPM_GET_INFO_PARAMETERS pParameters,
    _Out_ PDXGKMDT_OPM_REQUESTED_INFORMATION pRequestedInformation
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetOPMRandomNumber(
    _In_  OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _Out_ PDXGKMDT_OPM_RANDOM_NUMBER prnRandomNumber
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiGetPhysicalMonitorDescription(
    _In_  HANDLE hMonitor,
    _In_  DWORD dwPhysicalMonitorDescriptionSizeInChars,
    _Out_ PWSTR szPhysicalMonitorDescription
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiGetPhysicalMonitors(
    _In_  PUNICODE_STRING pstrDeviceName,
    _In_  DWORD dwPhysicalMonitorArraySize,
    _Out_ PDWORD pdwNumPhysicalMonitorHandlesInArray,
    _Out_ PHANDLE phPhysicalMonitorArray
    );

//[Other]
NTSTATUS
NTAPI
NtGdiGetSpoolMessage(
    PVOID Ptr1,
    ULONG Data1,
    PVOID Ptr2,
    ULONG Data2
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetSuggestedOPMProtectedOutputArraySize(
    _In_  PUNICODE_STRING pstrDeviceName,
    _Out_ PDWORD pdwSuggestedOPMProtectedOutputArraySize
    );

//[Other]
NTSTATUS
NTAPI
NtGdiInitSpool(
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiSetOPMSigningKeyAndSequenceNumbers(
    _In_ OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _In_ PDXGKMDT_OPM_ENCRYPTED_PARAMETERS pParameters /* MSDN has _Out_ const .. I don't believe it */
    );

//[Windows2003]
NTSTATUS
NTAPI
NtGdiSetupPublicCFONT(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );
